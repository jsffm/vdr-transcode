#!/bin/bash

# vdr-transcode				jsffm@web.de

# https://github.com/jsffm/vdr-transcode

# $Id$

# blancs in filename	Frank Kaiser <frank.kaiser@fuxbau.net>

# ifmt	input extension
# odir
# marker
# vcodec ?
# ivcodec input vcodec
# OUTPUT
# $(nproc)
# opus_br 2ch kbit
# service_name
# h264_level	automatic ?
# -strict experimental
# echo $USER
# id -g -n <user>

# [mp4 @ 0x7fffce613640] opus in MP4 support is experimental, add '-strict -2' if you want to use it.

#set -x

OUTPUT=vdr
h264=copy
#h264=hevc
hevc=copy
#mpeg2=copy
mpeg2=h264
mpeg4=copy
#mpeg4=h264
vp8=copy
vp9=copy
ac3=copy
#ac3_stereo=aac
eac3=copy
aac=copy
#mp2=copy
mp2=aac
mp3=copy
#mp3=aac
dts=copy
opus=copy
crf=21
hevc_cq=28
gq=30		# VP8
gop="-g 50"

#h264_level=3.0  # 720x576i
h264_level=4.1
#h264_level=4.2
#hevc_level=4.0
hevc_level=4.1
hevc_profile=main
h264enc=libx264
#h264enc="h264_nvenc"
#hevcenc=libx265
hevcenc="hevc_nvenc"
#deinterlace="-filter:v yadif"
deinterlace="yadif"
#deinterlace="-vf yadif_cuda"
#hwaccel=cuvid
#OPT_G="-hwaccel cuvid"
aac_stereo_br=96k
aac_6ch_br=256k
opus_br=64 # 2ch kbit

#aaclib="libfaac"
#aaclib="libfdk_aac" # Fraunhofer Library - bessere Qualit√§t
aaclib=aac

log=vdr-transcode.log
logs=/var/log/vdr-transcode.log
t=/tmp/vt
old=/tmp/vt-old
vtlog=/tmp/vt-log
conf1=$(realpath $0)".conf"
conf=/etc/vdr-transcode.conf
confs=/etc/vdr-transcode-s.conf
runs=/var/run/vt_server.pid
runvt=/var/run/vt.pid
vtc=vt.conf
lck=vt.lck
ffmpeg=ffmpeg
ffprobe=ffprobe
declare -a lang
declare -a langa

#exit

help_Input() {
    echo "Input"
    echo " -i <file>|vdr|dvd[:<track>]|<http> # default vdr"
    echo " -dvd <path>"
    echo " -BD <path>    # AVCHD"
    echo " -tr <track>   # DVD or AVCHD track"
    echo " -va <seconds> # add video at end, only ts"
    echo " -ia <file>|<http> # second audio source"
}

help_Output() {
    echo "Output"
    echo " -o vdr|mp4|mkv|ts|mp3 # default vdr"
    echo " -t <n>       # length in seconds"
    echo " -ss <position>"
    echo " -to <position>"
    echo " --streams"
    echo " --inf"
    echo " --stat       # status"
    echo " --diag"
}

help_Video() {
    echo "Video"
    echo " -h264 copy|h264|hevc|vp8|vp9|mpeg2"
    echo " -hevc copy|h264|hevc|vp8|vp9|mpeg2"
    echo " -mpeg2 copy|h264|hevc|vp8|vp9|mpeg2"
    echo " -mpeg4 copy|h264|hevc|vp8|vp9|mpeg2"
    echo " -vc1 copy|h264|hevc|vp8|vp9|mpeg2"
    echo " -vp8 copy|h264|hevc|vp8|vp9|mpeg2"
    echo " -vp9 copy|h264|hevc|vp8|vp9|mpeg2"
    echo " -vc|-vcodec <codec> # overwrites -h264|-hevc|-mpeg2"
    echo " -r <n>           # fps"
    echo " -b <n>           # constant bitrate for mp3, h264_omx"
    echo " -vf <filter>     # video filter"
    echo " -maxr <fps>      # max bitrate"
    echo " -crop <w:h>"
    echo " --LB             # -vf crop=iw:ih/4*3 -aspect 16:9"
    echo " -zoom <factor>   # crop=iw/<factor>:ih/<factor>"
    echo " -scale <w:h>|hd720|hd1080|qhd|pal"
    echo " -aspect <aspect> # 16:9|4:3"
    echo " --nohw           # no hardwaredecoding"
}

help_Audio() {
    echo "Audio"
    echo " -ac3 copy|eac3|aac|aac_he|aac_he_v2|opus"
    echo " -ac3_stereo aac|aac_he"
    echo " -eac3 copy|aac|aac_he|aac_he_v2|opus"
    echo " -dts copy|ac3|eac3|aac|opus"
    echo " -mp2 copy|aac|aac_he|aac_he_v2|opus"
    echo " -mp3 copy|aac"
    echo " -sel <n-n,n>     # audio, subtitle stream select"
    echo " --selb           # select best audio track"
    echo " -vol <factor>|<stream>=<factor> # Volume"
    echo " -lang <str>=<lang>[,<str>=<lang>]"
}

help_Automation() {
    echo "Automation"
    echo " --as &             # server start, search pathes in /etc/vdr-transcode-s.conf"
    echo " --ak               # server stop"
    echo " --conf <parameter> # mark for processing"
    echo " --alog             # process log"
    echo " --aq               # process queue"
    echo " --ac               # check processed"
    echo " --lsdel            # deletes processed records, marked to delete, use on your own risk"
}

help_Configuration() {
    echo "Configuration /etc/vdr-transcode.conf"
    help_Configuration_V
    help_Configuration_A
    echo " other"
    echo " -o vdr|mp4|mkv|ts|mp3 # default vdr"
    echo " -vdr <path_to_vdr>"
    echo " -ffmpeg <path_to_ffmpeg>"
    echo " -ffprobe <path_to_ffprobe>"
    echo " -mark <mark>     # mark at the end of transcoded recordings"
    echo " -odir <path>     # output directory"
    echo " -probesize <n>   # probesize"
    echo " -server_pid <pid_file>      # default /var/run/vt_server.pid"
    echo "                             # for run as user use e.g. ~/vt_server.pid"
    echo "                             # deprecated, use -pid_dir"
    echo " -pid_dir <pid_path>         # default /var/log"
    echo "                             # for run as user use e.g. ~"
    echo " -server_log <log_file>      # default /var/log/vdr-transcode.log"
    echo "                             # for run as user use e.g. ~/vdr-transcode.log"
}

help_Configuration_V() {
    #echo " video"
    echo " video configuration"
    echo " -g <n>           # goplength default 50"
    echo " -crf <n>         # quality h264 default 21, < = better"
    echo " -quality <n>     # vaapi h264 quality"
    echo " -cq <n>          # quality hevc default 28, < = better"
    echo " -gq <n>          # quality vp8 default 30, < = better"
    echo " -h264enc libx264|h264_nvenc|h264_vaapi|h264_omx"
    echo " -h264_level <level> # default 4.1"
    echo " -h264_br         # bitrate for h264_omx, -b works too"
    echo " -hevcenc hevc_nvenc|hevc_vaapi|libx265|libkvazaar"
    echo " -hevc_level <level>"
    echo " -hevc_profile <profile>     # main|main10"
    echo " -pix_fmt <pix_fmt>          # e.g. yuv420p"
    echo " -hwaccel cuvid|vaapi|vdpau"
}

help_Configuration_A() {
    echo " audio configuration"
    echo " -aac_stereo_br|-aac_br <br> # default 96k"
    echo " -aac_6ch_br <br>    # default 256k"
    echo " -aac_vbr <1-5>"
    echo " -opus_br <kbit>     # 2ch br in kbit default 64"
    echo " -aaclib aac|libfdk_aac|libfaac # default aac"
}

help() {
    #echo [$1][$2]
    #echo [$decition]
    echo $(basename $0) parameter
    if [ "$decition" == "-v" ]
    then
	help_Video
	help_Configuration_V
	exit
    fi
    if [ "$decition" == "-a" ]
    then
	help_Audio
	help_Configuration_A
	exit
    fi
    echo " -h <-v|-a> # this"
    help_Input
    help_Output
    help_Video
    help_Audio
    help_Automation
    help_Configuration
    #echo "Other"
    exit
}

add_vf() {
    #set -x
    if [ "$vf" == "" ]
    then
	vf="-vf $1"
    else
	vf=$vf","$1
    fi
    #set +x
}

hwdownload() {
    if [ "$hwaccel" == "cuvid" ]
    then
	add_vf hwdownload
	add_vf format=nv12
	deinterlace="yadif"
	#hwaccel=
    fi
}

parameter() {
    case $1 in
	"-h")
	    TODO=$1
	    INPUT=none
	    decition=$2
	    #help
	    ;;
	"-i")
	    INPUT=$2
	    ;;
	"-ia")
	    INPUTA=$2
	    ;;
	"-dvd")
	    INPUT=dvd
	    dvd_path=$2
	    ;;
	"-BD")
	    INPUT=BD
	    dvd_path=$2
	    ;;
	"-tr")
	    track=$2
	    ;;
	"--streams")
	    TODO=$1
	    ;;
	"--inf")
	    TODO=$1
	    ;;
	"--stat")
	    TODO=$1
	    INPUT=none
	    #status
	    ;;
	"--diag")
	    TODO=$1
	    INPUT=none
	    ;;
	"-o")
	    OUTPUT=$2
	    ;;
	"-r")
	    OPT="$OPT -r $2"
	    fpso=$2
	    ;;
	"-b")
	    OPT_V="$OPT_V -b:v $2"
	    h264_br="-b:v $2"
	    mp3_b="-b:a $2"
	    hevc_cq=0
	    ;;
	"-t")
	    OPT_G="$OPT_G -t $2"
	    ;;
	"-to")
	    OPT_G="$OPT_G -to $2"
	    ;;
	"-ss")
	    OPT_G="$OPT_G -ss $2"
	    ss=$2
	    ;;
	"-copytb")
	    OPT="$OPT -copytb $2"
	    ;;
	"-bsf")
	    OPT="$OPT -bsf:v $2"
	    ;;
	"-fflags")
	    OPT_G="$OPT_G -fflags $2"
	    ;;
	"-dts_delta_threshold")
	    OPT_G="$OPT_G -dts_delta_threshold $2"
	    ;;
	"-avoid_negative_ts")
	    OPT_G="$OPT_G -avoid_negative_ts $2"
	    ;;
	"-test")
	    OPT="$OPT $2"
	    ;;
	"-test2")
	    OPT="$OPT $2 $3"
	    #shift
	    ;;
	"-test3")
	    OPT="$OPT $2 $3 $4"
	    #shift
	    #shift
	    ;;
	"-test3g")
	    OPT_G="$OPT_G $2 $3 $4"
	    #shift
	    #shift
	    ;;
	"-vc1")
	    vc1=$2
	    ;;
	"-h264")
	    h264=$2
	    ;;
	"-h264_br")
	    h264_br="-b:v $2"
	    ;;
	"-hevc")
	    hevc=$2
	    ;;
	"-mpeg2")
	    mpeg2=$2
	    ;;
	"-mpeg4")
	    mpeg4=$2
	    ;;
	"-vp8")
	    vp8=$2
	    ;;
	"-vp9")
	    vp9=$2
	    ;;
	"-av1")
	    av1=$2
	    ;;
	"-vcodec"|"-vc")
	    vcodec=$2
	    ;;
	"-dts")
	    dts=$2
	    ;;
	"-ac3")
	    ac3=$2
	    ;;
	"-ac3v")
	    ac3v=$2
	    ;;
	"-ac3_stereo")
	    ac3_stereo=$2
	    ;;
	"-eac3")
	    eac3=$2
	    ;;
	"-aac")
	    aac=$2
	    ;;
	"-aac_stereo_br"|"-aac_br")
	    aac_stereo_br=$2
	    ;;
	"-aac_6ch_br")
	    aac_6ch_br=$2
	    ;;
	"-aac_vbr")
	    aac_vbr=$2
	    ;;
	"-opus")
	    opus=$2
	    ;;
	"-opus_br")
	    #set -x
	    opus_br=$2
	    [ "${opus_br:${#opus_br}-1:1}" == "k" ] && opus_br=${opus_br:0:${#opus_br}-1}
	    #exit
	    ;;
	"-mp2")
	    mp2=$2
	    ;;
	"-mp3")
	    mp3=$2
	    ;;
	"-crf")
	    crf=$2
	    ;;
	"-quality")
	    quality="-quality $2"
	    ;;
	"-cq")
	    hevc_cq=$2
	    ;;
	"-gq")
	    gq=$2	# VP8
	    ;;
	"-g")
	    gop="-g $2"
	    ;;
	"-vf")
	    add_vf $2
	    ;;
	"-maxr")
	    OPT="$OPT -maxrate $2 -bufsize 1835k"
	    ;;
	"-crop")
	    #crop="-vf crop=$2"
	    #hwdownload
	    #[ "$hwaccel" == "cuvid" ] && add_vf hwdownload && add_vf format=nv12
	    #add_vf "crop=$2"
	    crop="crop=$2"
	    ;;
	"--LB")
	    #hwdownload
	    #[ "$hwaccel" == "cuvid" ] && add_vf hwdownload && add_vf format=nv12
	    #add_vf "crop=iw:ih/4*3"
	    crop="crop=iw:ih/4*3"
	    aspect="-aspect 16:9"
	    #parameter "--nohw"
	    ;;
	"-zoom")
	    #hwdownload
	    #[ "$hwaccel" == "cuvid" ] && add_vf hwdownload && add_vf format=nv12
	    #add_vf "crop=iw/$2:ih/$2"
	    crop="crop=iw/$2:ih/$2"
	    ;;
	"-scale")
	    scale=$2
	    case "$scale" in
		"hd720")
		    scale="1280:720"
		    ;;
		"hd1080")
		    scale="1920:1080"
		    ;;
		"qhd")
		    scale="960:540"
		    ;;
		"pal")
		    scale="720:576"
		    ;;
	    esac
	    ;;
	"-aspect")
	    aspect="-aspect $2"
	    ;;
	"-va")
	    video_add=$2
	    ;;
	"-af")
	    OPT="$OPT -af $2"
	    ;;
	"-vol")
	    #set -x
	    str=${2%=*}
	    vol=${2#*=}
	    if [ "$str" == "$vol" ]
	    then
		OPT="$OPT -filter:a volume=$vol"
	    else
		OPT="$OPT -filter:$str volume=$vol"
	    fi
	    #exit
	    ;;
	"-h264enc")
	    h264enc=$2
	    ;;
	"-h264_level")
	    h264_level=$2
	    ;;
	"-hevcenc")
	    hevcenc=$2
	    ;;
	"-hevc_level")
	    hevc_level=$2
	    level_hevc="-level $2"
	    ;;
	"-hevc_profile")
	    hevc_profile=$2
	    ;;
	"-pix_fmt")
	    OPT="$OPT -pix_fmt $2"
	    ;;
	"-vp9enc")
	    vp9enc=$2
	    ;;
	"-aaclib")
	    aaclib=$2
	    ;;
	"-hwaccel")
	    hwaccel=$2
	    ;;
	"--nohw")
	    #deinterlace="-filter:v yadif"
	    deinterlace="yadif"
	    hwaccel=
	    #OPT_G=
	    ;;
	"-vdr")
	    vdr=$2
	    ;;
	"-sel")
	    select_str=$2
	    ;;
	"--selb")
	    sel_best=1
	    ;;
	"--info")
	    info=1
	    ;;
	"-lang")
	    set_lang $2
	    ;;
	"-probesize")
	    OPT_G="$OPT_G -probesize $2"
	    ;;
	"-anal")
	    OPT_G="$OPT_G -analyzeduration $2"
	    ;;
	"--q")
	    quiet=1
	    ;;
	"--nochapt")
	    nochapt=1
	    ;;
	"-DP")
	    OPT="$OPT -dsur_mode $2"	# 2 on
	    ;;
	"-stro")
	    set_streamo $2
	    ;;
	"--as")
	    TODO=$1
	    INPUT=none
	    #server
	    ;;
	"--asd")
	    TODO=$1
	    INPUT=none
	    #server
	    ;;
	"--ak")
	    TODO=$1
	    INPUT=none
	    #server_kill
	    ;;
	"-server_pid")
	    echo "deprecated, use -pid_dir"
	    eval runs=$2
	    eval runvt=(dirname $2)/vt.pid
	    ;;
	"-pid_dir")
	    eval runs=$2/vt_server.pid
	    eval runvt=$2/vt.pid
	    ;;
	"-server_log")
	    eval logs=$2
	    ;;
	"--conf")
	    TODO=$1
	    INPUT=none
	    #pa=$@
	    #auto_conf
	    ;;
	"--alog")
	    cat $logs
	    exit
	    ;;
	"--aq")
	    TODO=$1
	    INPUT=none
	    ;;
	"--ac")
	    TODO=$1
	    INPUT=none
	    ;;
	"--lsdel")
	    TODO=$1
	    INPUT=none
	    ;;
	"--lsdel_s")
	    TODO=$1
	    INPUT=none
	    ;;
	"--auto")
	    auto=1
	    #quiet=1
	    ;;
	"--apc")
	    apply_codec=1
	    ;;
	"-ffmpeg")
	    ffmpeg=$2
	    ;;
	"-ffprobe")
	    ffprobe=$2
	    ;;
	"-odir")
	    odir=$2
	    ;;
	"-mark")
	    marker=$2
	    ;;
	"-threads")
	    threads=$2
	    OPT="$OPT -threads $2"
	    ;;
	"--sim")
	    sim=1
	    ;;
	*)
	    echo $1 wrong
	    exit 8
	    ;;
    esac
}

read_configuration() {
    #set -x
    if [ -e $1 ]
    then
	while read line
	do
	    #echo $line
	    [ "${line:0:1}" == "#" ] && continue
	    [ "$line" == "" ] && continue
	    line=$(echo $line|cut -d '#' -f 1)
	    parameter $line
	done < $1
    fi
    #exit
}


set_lang() {
    #set -x
    IFS=,
    for la in $1
    do
	str=${la%=*}
	l=${la#*=}
	lang[$str]=$l
    done
    unset IFS
    #exit
}

declare -a streamo

set_streamo() {
    #set -x
    IFS=,
    for s in $1
    do
	str=${s%=*}
	to=${s#*=}
	streamo[$str]=$to
    done
    unset IFS
    #exit
}


#set -x
[ "$conf" != "" ] && read_configuration $conf
[ "$conf1" != "" ] && read_configuration $conf1
#declare -a $parametera_log
while [ "$1" ]
do
    parameter "$1" "$2" "$3" "$4"
    if [ "${1:0:1}" == "-" -a "${1:1:1}" != "-" ]
    then
	parameter_log="$parameter_log $1 $2\n"
	parameter_auto="$parameter_auto $1 $2|"
	shift
    else
	parameter_log="$parameter_log $1\n"
	parameter_auto="$parameter_auto $1|"
    fi
    shift
done
#[ "$auto" == "1" ] && read_configuration $vtc
[ -e $vtc ] && read_configuration $vtc
#exit

#set -x
IFS=,
del=
for s in $select_str
do
    #echo $s
    if [[ "$s" == *-* ]]
    then
	s1=${s%-*}
	s2=${s#*-}
	for (( i=$s1 ; i<=$s2 ; i++ ))
	do
	    #echo $i
	    select_str2=$select_str2$del$i
	    del=,
	done
    else
	select_str2=$select_str2$del$s
    fi
    del=,
done
unset IFS
#IFS=
#exit

status() {
    # vdr3-2 /usr/local/vdr/vdr-2.4.1 # to_h264_sh_current -s
    # /disk2/video/Blindspot/%In_der_Falle/2019-12-19.01.40.108-0.rec
    # Duration: 00:40:27.48,
    # fps=430 time=00:20:31.36 50% Comp=273%  8.6x
    # Size: 2575433 -> 940032
    # Est: 00:02:19

    #set -x
    #log=$(cat $vtlog)
    #log="$1"
    log="$@"
    [ ! -e "$log" ] && exit 8
    echo $log
    olddir=$(grep "PWD:" "$log")
    olddir=${olddir:5}
    info="$olddir/info"
    if [ -e "$info" ]
    then
	sender=$(grep ^C "$info"|cut -d \  -f 3-)
	#echo $sender
    fi
    oldsize=$(grep "oldsize=" "$log")
    oldsize=${oldsize#*=}
    # Duration: 01:51:21.66, start: 16209.384800, bitrate: 3498 kb/s
    dur1=$(grep "Duration:" "$log"|head -n 2)
    #echo $dur
    dur=$(echo $dur1|cut -d \  -f 2)
    dur=${dur:0:8}
    #set -x
    if [ "${dur:0:3}" == "N/A" ]
    then
	#echo $dur1 | tail -n 1
	dur=${dur1##*Duration: }
	dur=${dur:0:8}
    fi
    #exit
    durs=1
    [ "${dur:0:3}" != "N/A" ] && durs=$(date -u "+%s" -d "1970-01-01 $dur")
    durs1ms=$durs${dur:9:2}
    #fps1=$(grep "Video:" $log|head -n 1)
    fps1=$(grep "Video:" "$log"|tail -n 1)
    # Stream #0:0(eng): Video: h264 (High), yuv420p(tv, bt709, top first), 1920x1080 [SAR 1:1 DAR 16:9], 25 fps, 25 tbr, 1k tbn, 50 tbc Stream #0:0(eng): Video: hevc (hevc_nvenc) (Main), cuda, 1920x1080 [SAR 1:1 DAR 16:9], q=-1--1, 2000 kb/s, 50 fps, 1k tbn, 50 tbc
    fps1=${fps1%fps,*}
    nw=$(echo $fps1|wc -w)
    fps1=$(echo $fps1|cut -d \  -f $nw)
    #echo fps1=$fps1
    echo "Duration: $dur, fps=$fps1 $sender"
    # frame=15001 fps=11331 q=-1.0 Lsize=  173773kB time=00:04:59.98 bitrate=4745.4kbits/s speed= 227x
    #l=$(grep "^frame=" $(cat $vtlog) | tr '\r' '\n'| tail -n 1)
    # t=$(tr '\r' '\n' < $l | grep -a "^frame=" | tail -n 1)
    #l=$(grep "^frame=" $log | tr '\r' '\n'| tail -n 1)
    l=$(tr '\r' '\n' < "$log" | grep -a "^frame=" | tail -n 1)
    #echo $l
    dur2=${l#*time=}
    dur2=${dur2:0:8}
    dur2s=1
    [ "$dur2" != "N/A,‚Äô" ] && dur2s=$(date -u "+%s" -d "1970-01-01 $dur2")
    fps=${l#*fps=}
    fps=$(echo $fps|cut -d \  -f 1)
    size=${l#*size=}
    size=$(echo $size|cut -d \  -f 1)
    size=${size:0:-2}
    speed=${l#*speed=}
    time=${l##*time=}
    time=$(echo $time | cut -d \  -f 1)
    time2=$(date +"%s" -u -d "1970-01-01 ${time:0:8}")
    restz=$(($durs-$time2))
    if [ "$dur2" != "N/A,‚Äô" ]
    then
	prz=$(($dur2s*100/$durs))
	prm=$(($dur2s*1000/$durs))
    fi
    unset drop
    if [[ "$l" == *"drop="* ]]
    then
	drop=${l##*drop=}
	drop="drop="$(echo $drop | cut -d \  -f 1)
    fi
    #echo "fps=$fps, size=$size, time=$dur2, speed=$speed"
    #printf "fps=%3d, size=%d, time=%s, speed=%s\n" $fps $size $dur2 $speed
    if [ $prz -gt 0 ]
    then
	#set -x
	size2=$(($size*1000/$prm))
	#if [[ "$fps1" == *.* ]]
	[[ "$fps1" == *.* ]] && p1=1
	[[ "$fps" == *.* ]] && p2=1
	if [ "$p1" == "1" -o "$p2" == 1 ]
	then
	    exptime=$(echo "$restz*$fps1/$fps"|bc)
	else
	    exptime=$(($restz*$fps1/$fps))
	fi
	#echo $prz"% exp. size="$size2" exp. time="$(date "+%T"  -u -d @$exptime)
	exp=$(date "+%T" -u -d @$exptime)
	przs=$(($size2*100/$oldsize))
	#printf "%3d%% exp.size=%d exp.time=%s compr=%d%%\n" $prz $size2 $exp $przs
	echo "fps=$fps time=$dur2 $prz% $speed $drop"
	echo "Size: $oldsize -> $size2 $przs%"
	[ $restz -gt 0 ] && echo "Est: $exp"
	#date -u -d @$exptime
    fi
    #exit
}

diag() {
    #set -x
    v=$($ffmpeg -version)
    v=$(echo $v | cut -d \  -f 3)
    vtp=$(which vdr-transcode)
    #exit
    d=$(date "+%F" -r $vtp)
    echo "vdr-transcode $d ffmpeg Version $v"
    uname -p
    echo
    if [ -e $conf ]
    then
	echo "===================================="
	echo $conf
	#cat $1 >> $log_c
	while read line
	do
	    [ "${line:0:1}" != "#" ] && echo $line
	done < $conf
	echo "===================================="
	echo
    fi
    which mediainfo 2> /dev/null
    if [ $? -ne 0 ]
    then
	echo "mediainfo missing"
    fi
    echo
    ffmpeg -hide_banner -hwaccels
    lspci | grep VGA
    if [ -e /proc/asound/NVidia ]
    then
	#lspci -nnk | grep -A3 "\[03..\]:"
	xlog=/var/log/Xorg.0.log
	[ -e $xlog ] && grep "NVIDIA GPU " $xlog
	nvidia-smi | grep NVIDIA-SMI
	echo
	ffmpeg -hide_banner -encoders | grep nvenc
	echo
	ffmpeg -hide_banner -decoders | grep cuvid
    fi
    echo
    if [ -e /dev/dri/renderD128 ]
    then
	ffmpeg -hide_banner -encoders | grep vaapi
    fi
    echo
    ffmpeg -hide_banner -encoders | grep h264
    ffmpeg -hide_banner -encoders | grep hevc
    ffmpeg -hide_banner -encoders | grep aac
    ffmpeg -hide_banner -encoders | grep opus
    exit
}

ls_iso() {
    #set -x
    #[ "$1" != "" ] && mask="$1"
    e=$(readlink $(which ls))
    if [ "$e" == "" ]
    then
	if [ "$1" != "" ]
	then
	    ls -lL --time-style long-iso "$1"
	else
	    ls -lL --time-style long-iso
	fi
    else
	ls -l $1
    fi
    #exit
}

input_file() {
    #set -x
    #ls -l --time-style long-iso $INPUT > $old
    ifmt=${INPUT##*.}
    if [ "$ifmt" == "rec" ]
    then
	cd "$INPUT"
	INPUT=vdr
	input_vdr
	return
    fi
    #if [ "$(basename $INPUT)" == "VIDEO_TS" ]
    sss="$(basename "$INPUT")"
    if [ "$sss" == "VIDEO_TS" ]
    then
	dvd_path="$INPUT"
	INPUT=dvd
	input_dvd $track
	return
    fi
    oldsize=1
    rec_time=$(date "+%s")
    rm -f $old
    if [ "${INPUT:0:4}" != "http" ]
    then
	ls_iso "$INPUT" > $old
	# -rw-r--r-- 1 ftp ftp 4084731329 13. Mai 2014  exq-12years-720p.mkv
	oldsize=$(ls -lL "$INPUT"|cut -d \  -f 5)
	oldsize=$(($oldsize/1024))
	rec_time=$(date "+%s" -r "$INPUT")
	#chapt_mediainfo "$INPUT"
    else
	#set -x
	osr=$($ffprobe $INPUT 2>&1 | grep "Duration:")
	osd=$(echo $osr|cut -d \  -f 2)
	oss=$(date -u +%s -d "1970-01-01 ${osd:0:8}")
	osbr=$(echo $osr|cut -d \  -f 6)
	echo $oldsize
	oldsize=$(($oss*$osbr/8))
	#exit
    fi
    echo "oldsize="$oldsize >> $old
    ffmpeg_i="-i \"$INPUT\""
    input="$INPUT"
    name=${INPUT%.*}
    name=$(basename "$name")
    [ ${ffmpeg_i:${#ffmpeg_i}-1:1} == \" ] && x=eval
    $x $ffmpeg $ffmpeg_i 2> $t
    c_t=$(grep -i creation_time $t|head -n 1|cut -d ':' -f 2-)
    if [ "$c_t" != "" ]
    then
	#set -x
	# 2020-08-19T23:20:35.000000Z
	c_t=${c_t//\"/}
	c_t=${c_t:0:20}
	rec_time=$(date "+%s" -d "$c_t")
	#exit
    fi
    [ "$odir" != "" ] && dp=$odir/$name/
    dest=$dp$(date "+%F.%H.%M" -d @$rec_time)".3-0.rec"
    d32=0
    while [ -e $dest ]
    do
	d32=$(($d32+1))
	#dest="../"$(date "+%F.%H.%M" -d @$s)".$tr-$d32.rec"
	dest=$dp$(date "+%F.%H.%M" -d @$rec_time)".3-$d32.rec"
    done
    ifmt2="file"
    if [ "$ifmt" == "avi" ]
    then
	#nix=
	OPT_G="$OPT_G -fflags +genpts"
    fi
    #OPT_G="$OPT_G -fflags +igndts+genpts"
    #OPT_G="$OPT_G -fflags +genpts"
    #OPT_G="$OPT_G -use_wallclock_as_timestamps 1"
    info_name=$(basename "$PWD")
    #exit
}

input_vdra() {
    #set -x
    if [ ! -e 001.vdr ]
    then
	echo "No vdr recording"
	exit 8
    fi
    ls_iso > $old
    s=$(du)
    oldsize=$(echo $s|cut -d \  -f 1)
    echo "oldsize="$oldsize >> $old
    input=001.vdr
    ffmpeg_i="-i concat:"
    w="0*.vdr"
    d=
    for r in $w
    do
	ffmpeg_i=$ffmpeg_i$d$r
	d="|"
    done
    # 2011-09-26.19.28.40.01.rec
    d1=$(basename $PWD)
    dd1=${d1:0:10}
    dd=${d1:0:16}
    dh=${d1:11:2}
    dm=${d1:14:2}
    rec_time=$(date "+%s" -u -d "$dd1 $dh:$dm")
    #d3=$(echo $d1 | cut -d '.' -f 4-)
    d3="1-0.rec"
    dest=../$dd.$d3
    d30=$(echo $d3|cut -d '.' -f 1)
    d31=$(echo $d30|cut -d '-' -f 1)
    d32=$(echo $d30|cut -d '-' -f 2)
    while [ -e $dest ]
    do
        d32=$(($d32+1))
        #dd2=$(date -u "+%F.%H.%M" -d @$s)
        #dest=$dd2.$d31-$d32.rec
        dest=../$dd.$d31-$d32.rec
    done
    d2=$(dirname $PWD)
    name=$(basename $d2)
    [ ${name:0:1} == "%" ] && name=${name:1}
    [ "$name" == "_" ] && name=video
    OPT="$OPT -copyts -start_at_zero"
    name=../$name
    ifmt="vdr"
    #exit
}

input_vdr() {
    #set -x
    if [ ! -e 00001.ts ]
    then
	input_vdra
	return
	#echo "No vdr recording"
	#exit 8
    fi
    #ls -l --time-style long-iso * > $old
    ls_iso > $old
    s=$(du -L)
    oldsize=$(echo $s|cut -d \  -f 1)
    echo "oldsize="$oldsize >> $old
    input=00001.ts
    # 2018-06-09.14.01.50-0.rec
    #set -x
    w="0*.ts"
    #echo $w
    nw=$(echo $w|wc -w)
    #echo $nw
    if [ $nw -eq 1 ]
    then
	w=$(echo $w)
	ffmpeg_i="-i $w"
    else
	ffmpeg_i="-i concat:"
	d=
	for r in $w
	do
	    ffmpeg_i=$ffmpeg_i$d$r
	    d="|"
	done
    fi
    #exit
    d1=$(basename $PWD)
    d2=$(dirname $PWD)
    name=$(basename $d2)
    dd1=${d1:0:10}
    dd=${d1:0:16}
    dh=${d1:11:2}
    dm=${d1:14:2}
    #set -x
    rec_time=$(date "+%s" -u -d "$dd1 $dh:$dm")
    if [ "$ss" != "" ]
    then
	# ss
	# date -u "+%s" -d "1970-01-01 0:1:50"
	nd=$(echo $ss | grep -o ":" | wc -m)
	case $nd in
	    0)
		ss2=0:0:$ss
		[ $ss -gt 59 ] && ss2=$(date -u "+%T" -d @$ss)
		;;
	    2)
		ss2=0:$ss
		;;
	    4)
		ss2=$ss
		;;
	esac
	ss3=$(date -u "+%s" -d "1970-01-01 $ss2")
	if [ "$ss3" == "" ]
	then
	    echo "-ss $ss wrong"
	    exit 8
	fi
	rec_time=$((rec_time+$ss3))
	#echo $dd
	dd=$(date -u "+%F.%H.%M" -d @$rec_time)
    fi
    #exit
    d3=$(echo $d1 | cut -d '.' -f 4-)
    dp=".."
    if [ "$marker" != "" ]
    then
	dp="../../$name$marker"
    fi
    if [ "$odir" != "" ]
    then
	dp=$odir/$name$marker
	s=$(grep "^S" info)
	if [ "$s" != "" ]
	then
	    s=${s:2}
	    s=$(echo $s|tr -s ' ' '_')	# checkme
	    [[ "$name" == *$s* ]] && serie=1
	    [[ "$s" == *serie* ]] && serie=1
	    if [ "$serie" == "1" ]
	    then
		d0=$(dirname $d2)
		d0=$(basename $d0)
		dp=$odir/$d0/$name
	    fi
	fi
    fi
    #dest=$dp/$dd.$d3
    d30=$(echo $d3|cut -d '.' -f 1)
    d31=$(echo $d30|cut -d '-' -f 1)
    d32=$(echo $d30|cut -d '-' -f 2)
    d32=$(($d32+1))
    dest=$dp/$dd.$d31-$d32.rec
    while [ -e $dest ]
    do
        d32=$(($d32+1))
        #dd2=$(date -u "+%F.%H.%M" -d @$s)
        #dest=$dd2.$d31-$d32.rec
        dest=$dp/$dd.$d31-$d32.rec
    done
    [ ${name:0:1} == "%" ] && name=${name:1}
    [ "$name" == "_" ] && name=video
    [ "$odir" != "" ] && dp=$odir
    name=$dp/$name
    ifmt="vdr"
    #exit
}

chapt_mediainfo() {
#set -x
which mediainfo 2> /dev/null
[ $? -ne 0 ] && return
meta=ffmetadata
rm $meta
echo ";FFMETADATA1" > $meta
echo ";mediainfo" >> $meta
mi=mediainfo.txt
mediainfo $1 > $mi
found=0
while read line
do
    if  [ "$line" == "" ]
    then
        found=0
    fi
    if [ $found == 1 ]
    then
        # 00:08:28.333 : Chapter 2
        echo $line
        if [ "${line:0:8}" == "Duration" ]
        then
	    continue
	fi
        if [ "${line:0:4}" == "List" ]
        then
	    break
	fi
	#set -x
        ch=$line
        cht=$(echo $line|cut -d ' ' -f 1)
        chn=$(echo $line|cut -d ' ' -f 3-)
        hh=${cht:0:2}
        mm=${cht:3:2}
        ss=${cht:6:2}
        ms=${cht:9:3}
        s=$(date -u "+%s" -d "1970-01-01 $hh:$mm:$ss")
        #s=$(($s*1000+$ms))
        s="$s$ms"
        if [ "$cha" != "" ]
        then
            echo "[CHAPTER]" >> $meta
            echo "TIMEBASE=1/1000" >> $meta
            echo "START="$sa >> $meta
            echo "#chapter ends at" $cht >> $meta
            #se=$(($s-1))
            echo "END="$s >> $meta
            echo "title="$chna >> $meta
            #exit
        fi
        cha=$ch
        chta=$cht
        chna=$chn
        sa=$s
        #exit
    fi
    if  [ "$line" == "Menu" ]
    then
        found=1
    fi
done < $mi
#set -x
dur=$(grep ^Duration $mi|head -n 1)
# Duration                                 : 1 h 27 min
dur2=$(echo $dur|cut -d ':' -f 2)
h=$(echo $dur2|cut -d \  -f 1)
m=$(echo $dur2|cut -d \  -f 3)
s=$(($h*3600+$m*60))
s=$(($s*1000))
echo "[CHAPTER]" >> $meta
echo "TIMEBASE=1/1000" >> $meta
echo "START="$sa >> $meta
echo "#chapter ends at" $dur2 >> $meta
echo "END="$s >> $meta
echo "title="$chna >> $meta
#exit
}

input_dvd() {
    #echo
    #set -x
    parameter --nohw
    tr=1
    [ "$1" != "" ] && tr=$1
    tr2=$(printf "%02d" $tr)
    #ls -l --time-style long-iso * > $old
    if [ "$dvd_path" != "" ]
    then
	n=${#dvd_path}
	[ ${dvd_path:$n-1:1} != "/" ] && dvd_path=$dvd_path"/"
	b=$(basename $dvd_path)
	[ "$b" != "VIDEO_TS" ] && dvd_path=$dvd_path"VIDEO_TS/"
    else
	dvd_path="VIDEO_TS/"
    fi
    #set -x
    rm -f $old
    if [ "${dvd_path:0:5}" == "/mnt/" ]
    then
	p=$(mount | grep $(dirname $dvd_path) | cut -d \  -f 1)
	echo $p > $old
    fi
    ls_iso $dvd_path >> $old
    #exit
    #s=$(du $dvd_path)
    #oldsize=$(echo $s|cut -d \  -f 1)
    ffmpeg_i="-i concat:"
    input=$dvd_path"VTS_"$tr2"_1.VOB"
    #w="VTS_0"$tr"_*.VOB"
    i=1
    del=
    sum=0
    while [ -e $dvd_path"VTS_"$tr2"_$i.VOB" ]
    do
	r=$dvd_path"VTS_"$tr2"_$i.VOB"
        #echo $r
	s=$(ls -l $r|cut -d \  -f 5)
	sum=$(($sum+$s))
        ffmpeg_i=$ffmpeg_i$del$r
        del="|"
        i=$(($i+1))
    done
    oldsize=$(($sum/1024))
    echo "oldsize="$oldsize >> $old
    #exit
    #d=$(dirname $PWD)
    d=$PWD
    #name=../$(basename $d)-$tr
    name=$(basename $d)-$tr
    info_name=$(echo $(basename $d)|tr '_' ' ')	# checkme
    ifmt="dvd"
    if [ "$OUTPUT" == "vdr" ]
    then
	#set -x
	s=$(date "+%s" -r $dvd_path"VTS_"$tr2"_0.IFO")
	if [ -e ../info.vdr ]
	then
	    e=$(grep "^E" ../info.vdr)
	    s=$(echo $e|cut -d \  -f 3)
	fi
	rec_time=$s
	#dest="../"$(date "+%F.%H.%M" -d @$s)".$tr-0.rec"
	dest=$(date "+%F.%H.%M" -d @$s)".$tr-0.rec"
	#exit
	d32=0
	while [ -e $dest ]
	do
	    d32=$(($d32+1))
	    #dest="../"$(date "+%F.%H.%M" -d @$s)".$tr-$d32.rec"
	    dest=$(date "+%F.%H.%M" -d @$s)".$tr-$d32.rec"
	done
    else
	which mediainfo 2> /dev/null
	if [ $? -eq 0 ]
	then
	    [ "$nochapt" != "1" ] && chapt_mediainfo $dvd_path"VTS_"$tr2"_0.IFO"
	fi
    fi
    #OPT_G="$OPT_G -fflags +genpts"
    OPT_G="$OPT_G -fix_sub_duration"
    #exit
}

chapt_tsmuxer() {
    #set -x
    meta=ffmetadata
    rm $meta
    echo ";FFMETADATA1" > $meta
    echo ";tsmuxer" >> $meta
    temp=tsmuxer.txt
    tsMuxeR $1 > $temp
    dur=0
    while read line
    do
	if [ "${line:0:6}" == "Marks:" ]
	then
	    marks="$marks ${line:7}"
	fi
	if [ "${line:0:9}" == "Duration:" ]
	then
	    #set -x
	    # Duration: 00:26:47.055
	    dur1=${line:10:8}
	    durs=$(date -u "+%s" -d "1970-01-01 $dur1")
	    dur=$(($dur+$durs))
	    #exit
	fi
	if [ "${line:0:9}" == "Track ID:" ]
	then
	    tid=$(echo $line|cut -d ':' -f 2)
	    tid=$(echo $tid)
	fi
	if [ "${line:0:12}" == "Stream lang:" ]
	then
	    l1=$(echo $line|cut -d ':' -f 2)
	    langa[$tid]=$(echo $l1)
	fi
    done < $temp
    #exit
    ch=0
    for ma in $marks
    do
	#echo $ma
	hh=${ma:0:2}
	mm=${ma:3:2}
	ss=${ma:6:2}
	ms=${ma:9:3}
	#s=$(($h*3600+$m*60))
	s=$(date -u "+%s" -d "1970-01-01 $hh:$mm:$ss")
	s="$s$ms"
	if [ $s -gt 0 ]
	then
	    echo "[CHAPTER]" >> $meta
	    echo "TIMEBASE=1/1000" >> $meta
	    echo "START="$sa >> $meta
	    echo "#chapter ends at" $ma >> $meta
	    echo "END="$s >> $meta
	    echo "title=Chapter "$ch >> $meta
	fi
	ch=$(($ch+1))
	sa=$s
	#exit
    done
    if [ $dur -gt $sa ]
    then
	echo "[CHAPTER]" >> $meta
	echo "TIMEBASE=1/1000" >> $meta
	echo "START="$sa >> $meta
	echo "#chapter ends at" $ma >> $meta
	echo "END="$dur"000" >> $meta
	echo "title=Chapter "$ch >> $meta
    fi
    #exit
}


BD_size() {
    # can be wrong
    #set -x
    p=0
    declare -a size
    fn=0
    sum=0
    f=$(printf "$1/BDMV/STREAM/%05d.m2ts" $fn)
    if [ ! -e $f ]
    then
	fn=1
	f=$(printf "$1/BDMV/STREAM/%05d.m2ts" $fn)
    fi
    while [ -e $f ]
    do
	s=$(ls -l $f|cut -d \  -f 5)
	sum=$(($sum+$s))
	# 4000398
	if [ $s -lt 4000000000 -o $s -gt 4195000000 ]
	then
	    size[$p]=$sum
	    p=$(($p+1))
	    sum=0
	fi
	fn=$(($fn+1))
	f=$(printf "$1/BDMV/STREAM/%05d.m2ts" $fn)
    done
    echo ${size[$2]}
    #exit
}

chapt_BD() {
    chap_list="$bdir/BDMV/META/ES/esmt_deu_0000"$playlist".xml"
    meta=ffmetadata
    rm -f $meta
    echo ";FFMETADATA1" > $meta
    echo ";$chap_list" >> $meta
    echo "title=$fn" >> $meta
    if [ -e $chap_list ]
    then
	#set -x
	while read line
	do
	    #echo $line
	    l=$(echo $line)
	    if [ ${l:0:6} == "<scene" ]
	    then
		#echo $l
		e=${l##*entry_point=}
		e=$(echo $e|cut -d '>' -f 1)
		ctitle=${l##*<name>}
		ctitle=$(echo $ctitle|cut -d '<' -f 1)
		hh=${e:3:2}
		mm=${e:6:2}
		ss=${e:9:2}
		s=$(date -u "+%s" -d "1970-01-01 $hh:$mm:$ss")
		s=$(($s*1000))
		if [ "$sa" != "" ]
		then
		    echo "[CHAPTER]" >> $meta
		    echo "TIMEBASE=1/1000" >> $meta
		    echo "START="$sa >> $meta
		    echo "#chapter ends at" $e >> $meta
		    echo "END="$s >> $meta
		    echo "title="$ctitle_a >> $meta
		fi
		sa=$s
		ctitle_a=$ctitle
	    fi
	done < $chap_list
	#exit
    else
	which tsMuxeR 2> /dev/null
	if [ $? -eq 0 ]
	then
	    chapt_tsmuxer $mpls
	else
	    which mediainfo 2> /dev/null
	    [ $? -eq 0 ] && chapt_mediainfo $mpls
	fi
    fi
}

input_BD() {
    #set -x
    #parameter "--nohw"
    playlist=$1
    #fn=$(basename $PWD)
    #bdir=$dvd_path"/AVCHD"
    bdir=$dvd_path
    #oldsize=1
    details=$bdir/details.txt
    if [ "$playlist" = "" ]
    then
	if [ -e $details ]
	then
	    cat $details
	    iconv -f ISO-8859-1 -t UTF-8 < $details > details.txt
	    i=0
	    while read line
	    do
		echo -n $i" "
		echo $line | cut -d ';' -f 1
		i=$(($i+1))
	    done < details.txt
	fi
	$ffmpeg -hide_banner -i bluray:$bdir 2> $t
	grep -a playlist $t
	exit
    fi
    echo "playlist=$playlist" > $old
    oldsize=$(BD_size $bdir $playlist)
    oldsize=$(($oldsize/1024))
    echo "oldsize="$oldsize >> $old
    ffmpeg_i="-playlist $playlist -i bluray:$bdir"
    d=$PWD
    name=$(basename $d)-$playlist
    if [ -e $details ]
    then
	n=$(($playlist+1))
	z=$(sed -n $n"p" $details)
	echo $z
	name=$(echo $z | cut -d ';' -f 1 | iconv -f ISO-8859-15 -t UTF-8)
	info_name=$name
	name=$(echo $name|tr ' ' '_')	# checkme
    fi
    ifmt="BD"
    mpls=$(printf "$bdir/BDMV/PLAYLIST/%05d.mpls" $playlist)
    [ ! -e $mpls ] && mpls=$(printf "$bdir/BDMV/PLAYLIST/%05d.mpl" $playlist)
    ls_iso $mpls >> $old
    #td=$(ls -l --time-style="+%Y%m%d%H%M" $mpls|cut -d \  -f 6)
    rec_time=$(date -r $mpls "+%s")
    #set -x
    if [ "$OUTPUT" == "vdr" ]
    then
	#set -x
	info=$bdir/vdr/$(($playlist+1))"-info"
	if [ -e $info ]
	then
	    #cat $info
	    e=$(grep "^E" $info)
	    # E 887 1286808000 5400 4E 4
	    rec_time=$(echo $e|cut -d \  -f 3)
	    BD_info=$info
	fi
	#exit
	dest=$name/$(date "+%F.%H.%M" -d @$rec_time)".$playlist-0.rec"
	d32=0
	while [ -e $dest ]
	do
	    d32=$(($d32+1))
	    dest=$name/$(date "+%F.%H.%M" -d @$rec_time)".$playlist-$d32.rec"
	done
    else
	[ "$nochapt" != "1" ] && chapt_BD
	#chapt_tsmuxer $mpls
    fi
    OPT="$OPT -copytb 1"
    #exit
}

set_hwacc() {
    case "$hwaccel" in
	"cuvid")
	    #OPT_G="$OPT_G -hwaccel cuvid"
	    # -hwaccel_output_format cuda
	    #HWACC="-hwaccel cuvid"
	    HWACC="-hwaccel cuvid -hwaccel_output_format cuda"
	    #HWACC="-hwaccel cuvid -hwaccel_output_format nv12"
	    #deinterlace="-vf yadif_cuda"
	    deinterlace="yadif_cuda"
	    [ "$scale" != "" ] && add_vf scale_cuda=$scale
	    ;;
	"vaapi")
	    #OPT_G="$OPT_G -hwaccel vaapi -hwaccel_device /dev/dri/renderD128 -hwaccel_output_format vaapi"
	    #OPT_G="$OPT_G -hwaccel vaapi -vaapi_device /dev/dri/renderD128 -hwaccel_output_format vaapi"
	    HWACC="-hwaccel vaapi -vaapi_device /dev/dri/renderD128 -hwaccel_output_format vaapi"
	    #deinterlace="-vf 'deinterlace_vaapi=rate=field:auto=1'"
	    #deinterlace="-vf deinterlace_vaapi"
	    deinterlace="deinterlace_vaapi"
	    [ "$scale" != "" ] && add_vf scale_vaapi=$scale
	    ;;
	"vdpau")
	    export DISPLAY=:0.0
	    HWACC="-hwaccel vdpau"
	    [ "$scale" != "" ] && add_vf scale=$scale
	    ;;
	"vulkan")
	    #export DISPLAY=:0.0
	    HWACC="-hwaccel vulkan"
	    [ "$scale" != "" ] && add_vf scale=$scale
	    ;;
	*)
	    [ "$scale" != "" ] && add_vf scale=$scale
	    ;;
    esac
}


streams() {
    #set -x
    #$ffmpeg -hide_banner $OPT_G $ffmpeg_i 2>&1 | grep "Stream"
    #ffprobe -hide_banner $ffmpeg_i
    #sss="$ffmpeg -hide_banner $OPT_G $ffmpeg_i 2>&1 | grep \"Stream\""
    #eval $sss
    [ ${ffmpeg_i:${#ffmpeg_i}-1:1} == \" ] && x=eval
    $x $ffmpeg -hide_banner $OPT_G $ffmpeg_i 2>&1 | grep "Stream"
    exit
}

inf() {
    #set -x
    #echo "["$ffmpeg_i"]"
    info=info
    if [ -e $info ]
    then
	sender=$(grep ^C $info|cut -d \  -f 3-)
	echo $sender
    fi
    #$ffmpeg $OPT_G $ffmpeg_i 2>&1 | grep -E "Duration|Stream|Chapter"
    #sss="$ffmpeg $OPT_G $ffmpeg_i 2>&1 | grep -E \"Duration|Stream|Chapter\""
    #eval $sss
    [ ${ffmpeg_i:${#ffmpeg_i}-1:1} == \" ] && x=eval
    [ "$INPUTA" != "" ] && ffmpeg_i="$ffmpeg_i -i $INPUTA"
    $x $ffmpeg $OPT_G $ffmpeg_i 2>&1 | grep -E "Duration|Stream|Chapter"
    exit
}

set_video() {
    case $1 in
	copy)
	    video="-c:v:0 copy"
	    ;;
	h264)
	    set_h264
	    ;;
	hevc)
	    set_hevc
	    ;;
	vp8)
	    set_vp8
	    ;;
	vp9)
	    set_vp9
	    ;;
	mpeg2)
	    set_mpeg2
	    ;;
    esac
}

set_h264() {
    #set -x
    # maxr="-maxrate "$br"k -bufsize 1835k"
    h264_profile=high
    level="-level $h264_level"
    if [ $h264enc == "libx264" ]
    then
	#parameter --nohw
	preset="-preset fast -tune film -profile:v $h264_profile $level -crf $crf $maxr"
    fi
    [ $h264enc == "h264_nvenc" ] && preset="-preset hq -profile:v $h264_profile $level -cq $crf $nvenc_b $maxr"
    if [ $h264enc == "h264_vaapi" ]
    then
	[ "${v:0:3}" ">" "4.1" ] && rc_mode="-rc_mode CQP"
	preset="-profile:v $h264_profile $level $rc_mode -qp $crf $quality $maxr"
    fi
    [ $h264enc == "h264_omx" ] && preset="-profile:v high"
    #video="-c:v:0 $h264enc $preset $gop $deinterlace $crop $aspect"
    video="-c:v:0 $h264enc $preset $gop $vf $aspect $h264_br"
    #[ "$hwaccel" == "cuvid" ] && OPT_G="$OPT_G $decode_cuvid"
    [ "$hwaccel" == "cuvid" ] && OPT_I="$OPT_I $decode_cuvid"
    [ "$hwaccel" == "mmal" ] && OPT_I="$OPT_I $decode_mmal"
    vcodec="h264"
    #exit
}

set_hevc() {
    case "$hevcenc" in
	"libx265")
	    #parameter --nohw
	    HWACC=
	    deinterlace="yadif"
	    x265_params="-x265-params crf=$hevc_cq:level-idc=$hevc_level"
	    [ "$threads" != "" ] && x265_params="-threads $threads "$x265_params":pools=$threads"
	    #preset="-preset veryfast $level_hevc -crf $crf $maxr"
	    #preset="-preset veryfast $h265_level -crf $hevc_cq $maxr"
	    preset="-preset ultrafast $x265_params -crf $hevc_cq $maxr"
	    ;;
	"hevc_nvenc")
	    preset="-preset hq -profile:v $hevc_profile $level_hevc -rc vbr -cq $hevc_cq $opt_r"
	    ;;
	"hevc_vaapi")
	    [ "${v:0:3}" ">" "4.1" ] && rc_mode="-rc_mode CQP"
	    [ "${v:0:3}" ">" "4.2" ] && rc_mode="-rc_mode ICQ"
	    preset="-profile:v $hevc_profile -tier high $level_hevc $rc_mode -qp $hevc_cq $opt_r"
	    ;;
	"libkvazaar")
	    #parameter --nohw
	    #hwaccel=
	    HWACC=
	    deinterlace="yadif"
	    decode_cuvid=
	    preset="-profile:v $hevc_profile -kvazaar-params preset=ultrafast,qp=$hevc_cq,level=$hevc_level"
	    #preset="-kvazaar-params preset=ultrafast,qp=$hevc_cq,input-bitdepth=10,transfer=bt2020-10"
	    ;;
	*)
	    echo "-hevcenc=$hevcenc wrong"
	    exit 8
	    ;;
    esac
    video="-c:v $hevcenc $preset $gop $vf $aspect $OPT_V"
    #[ "$hwaccel" == "cuvid" ] && OPT_G="$OPT_G $decode_cuvid"
    [ "$hwaccel" == "cuvid" ] && OPT_I="$OPT_I $decode_cuvid"
    [ "$hwaccel" == "mmal" ] && OPT_I="$OPT_I $decode_mmal"
    vcodec="hevc"
}

set_vp8() {
    if [ "$OUTPUT" == "vdr" ]
    then
	echo "vdr don¬¥t like vp8"
	exit 8
    fi
    #vp8flags="-vp8flags --cq-level=$gq"
    opt_vp8="-quality good -speed 1 -cpu-used -5"
    video="-c:v libvpx $vp8flags -crf $gq $gop $opt_vp8 $vf $aspect"
    if [ "$hwaccel" == "vaapi" ]
    then
	#[ "$codec" == "mpeg4" ] && parameter --nohw
	video="-c:v vp8_vaapi -rc_mode:v CQP -global_quality:v $gq $gop $vf $aspect"
    #else
	#echo "Only vaapi"
	#exit 8
    fi
}

set_vp9() {
    if [ "$OUTPUT" == "vdr" ]
    then
	echo "vdr don¬¥t like vp9"
	exit 8
    fi
    # crf 0..63
    # crf=33
    # video="-c:v libvpx-vp9 $gop -b:v 0 -crf $crf -threads 16 -tile-columns 6 -frame-parallel 1"
    if [ "$hwaccel" == "cuvid" ]
    then
	hwdownload
	#add_vf format=yuv420p
	#add_vf hwdownload
	#add_vf format=nv12
	OPT_I="$OPT_I $decode_cuvid"
    fi
    if [ "$hwaccel" == "vaapi" ]
    then
	video="-c:v vp9_vaapi -rc_mode:v CQP -global_quality:v $gq $gop $vf $aspect"
    #else
	#echo "Only vaapi"
	#exit 8
    fi
    if [ "$vp9enc" == "libvpx-vp9" ]
    then
	#crf=33
	crf=40
	video="-c:v libvpx-vp9 $gop -b:v 0 -crf $crf -threads 16 -tile-columns 6 -tile-rows 2 -frame-parallel 1 -cpu-used -5 $vf"
    fi
}

set_av1() {
    aopt="-row-mt 1"
    #aopt="$aopt -tiles 4x1"
    aopt="$aopt -tiles 2x2"
    aopt="$aopt -threads 8"
    video="-c:v libaom-av1 -cpu-used 8 -crf $crf $aopt -strict experimental"
}

set_mpeg2() {
    br="-b:v 4000k"
    [ "$h264_br" != "" ] && br=$h264_br
    #add_vf hwupload
    if [ "$hwaccel" == "cuvid" ]
    then
	hwdownload
	#add_vf format=nv12
	#add_vf hwdownload
	#add_vf format=nv12
	OPT_I="$OPT_I $decode_cuvid"
    fi
    add_vf tinterlace=5
    video="-c:v mpeg2video $br -dc 9 -flags +ilme+ildct -alternate_scan 1 -top 1 $vf $aspect"
    #HWACC=
    #[ "$hwaccel" == "cuvid" ] && OPT_I="$OPT_I $decode_cuvid"
    [ "$aac" == "copy" ] && aac=mp2
    [ "$eac3" == "copy" ] && eac3=mp2
}

set_aac() {
    if [ "$1" == "he" ]
    then
	[ "$aaclib" != "libfdk_aac" ] && echo "works only with libfdk_aac" && exit 8
	aac_profile="-profile:a aac_he -latm 1"
	#aac_profile="-profile:a aac_he"
	[ "$aac_vbr" == "" ] && aac_vbr=3
	[ "$OUTPUT" == "vdr" -a "$aac_opt" == "" ] && OPT="$OPT -mpegts_flags latm -flags:a +global_header" && aac_opt=1
    fi
    if [ "$1" == "he_v2" ]
    then
	[ "$aaclib" != "libfdk_aac" ] && echo "works only with libfdk_aac" && exit 8
	aac_profile="-profile:a aac_he_v2 -latm 1"
	[ "$aac_vbr" == "" ] && aac_vbr=1
	[ "$OUTPUT" == "vdr" -a "$aac_opt" == "" ] && OPT="$OPT -mpegts_flags latm -flags:a +global_header" && aac_opt=1
    fi
    [ "$aac_vbr" != "" ] && brv="-vbr $aac_vbr"
    #[ "$OUTPUT" == "vdr" -a "$aac_opt" == "" ] && OPT="$OPT -mpegts_flags latm -flags:a +global_header" && aac_opt=1
    #[ "$OUTPUT" == "vdr" -a "$aac_opt" == "" ] && OPT="$OPT -latm 1 -mpegts_flags latm -flags:a +global_header" && aac_opt=1
#    if [ "$OUTPUT" == "vdr" -a $ar1 -ne 48000 ]
#    then
#	ar="-ar:$stro 48000"
#	#audio_t="-c:$stro $aaclib -b:$stro $aac_stereo_br $ar"
#    fi
    [ "$OUTPUT" == "vdr" -a $ar1 -ne 48000 ] && ar="-ar:$stro 48000"
    if [ "$aac_vbr" != "" ]
    then
	[ "$aaclib" == "libfdk_aac" ] && brv="-vbr $aac_vbr"
	if [ "$aaclib" == "aac" ]
	then
	    brv="-q:$stro $aac_vbr"
	    #br="-vbr $aac_vbr"
	fi
    fi
    if [ "$atyp" != "stereo" -a "$atyp" != "2" ]
    then
	br="-b:$stro $aac_6ch_br"
	#[ "$aac_vbr" != "" ] && br="-vbr $aac_vbr"
	[ "$brv" != "" ] && br=$brv
	audio_t="-c:$stro $aaclib $aac_profile $br -ac:$stro 6"
    else
	br="-b:$stro $aac_stereo_br"
	[ "$brv" != "" ] && br=$brv
	audio_t="-c:$stro $aaclib $aac_profile $br $ar"
    fi
}

set_opus() {
    if [ "$OUTPUT" == "vdr" ]
    then
	echo "opus not supported by vdr"
	exit 8
    fi
    #abr=64000
    #[ "$opus_br" != "" ] && abr=opus_br
    abr=$((opus_br*1000))
    [ "$atyp" != "stereo" -a "$atyp" != "2" ] && abr=$(($abr*3))
    audio_t="-c:$stro libopus -vbr on -b:$stro $abr"
}

set_ac3() {
    if [ "$atyp" != "stereo" -a "$atyp" != "2" ]
    then
	audio_t="-c:$stro ac3 -b:$stro 448k"
    else
	audio_t="-c:$stro ac3 -b:$stro 192k"
    fi
}

set_eac3() {
    if [ "$atyp" != "stereo" -a "$atyp" != "2" ]
    then
	audio_t="-c:$stro eac3 -b:$stro 256k"
    else
	audio_t="-c:$stro eac3 -b:$stro 128k"
    fi
}

set_mp2() {
    audio_t="-c:$stro libtwolame -b:$stro 192k"
}

set_audio_plus() {
    map="$map -map $str0:$str"
    audio="$audio -c:$stro copy"
    stro1=$(($stro1+1))
    stro=$stro1
    codec1=${codec1:1}
}

set_audio() {
    #set -x
    codec1=$1
    [ ${codec1:0:1} == "+" ] && set_audio_plus
    case $codec1 in
	"copy")
	    audio_t="-c:$stro copy"
	    ;;
	"ac3")
	    set_ac3
	    ;;
	"eac3")
	    set_eac3
	    ;;
	"aac")
	    set_aac
	    ;;
	"aac_he")
	    set_aac he
	    ;;
	"aac_he_v2")
	    set_aac he_v2
	    ;;
	"opus")
	    set_opus
	    ;;
	"mp2")
	    set_mp2
	    ;;
	*)
	    echo $1 wrong
	    exit 8
	    ;;
    esac
    #exit
    }

analyze() {
    #set -x
    #$ffprobe -hide_banner $ffmpeg_i 2>&1 | grep "Stream" > $t
    #sss="$ffprobe -hide_banner $ffmpeg_i 2>&1 | grep "Stream" > $t"
    #eval $sss
    [ ${ffmpeg_i:${#ffmpeg_i}-1:1} == \" ] && x=eval
    if [ "$INPUTA" != "" ]
    then
	ffmpeg_i="$ffmpeg_i -i \"$INPUTA\""
	#map="$map -map 1:a"
	#audio="$audio -c:a copy"
	#[ "${lang[2]}" != "" ] && OPT="$OPT -metadata:s:2 language=${lang[2]}"
	$x $ffmpeg -hide_banner $ffmpeg_i 2>&1 | grep "Stream" > $t
    else
	$x $ffprobe -hide_banner $ffmpeg_i 2>&1 | grep "Stream" > $t
    fi
    #cat $t
    #exit
    #set -x
    which mediainfo 2> /dev/null
    if [ $? -eq 0 ]
    then
	scantype=$(mediainfo --Inform="Video;%ScanType/String%" "$input")
    else
	echo "mediainfo missing, trying ffmpeg" >> $log_c
	s1=$(grep "Video:" $t)
	# Stream #0:0[0x96a]: Video: hevc (Main)
	codec=$(echo $s1|cut -d \  -f 4)
	codec=${codec//,/}
	if [[ "$s1" == *progressive* ]]
	then
	    scantype="Progressive"
	else
	    scantype="not progr"
	fi
	[ "$codec" == "hevc" ] && scantype="Progressive"
	#echo "ivcodec=$ivcodec"
    fi
    echo "scantype=$scantype" >> "$log_c"
    if [ "$scantype" == "Progressive" -o "$scantype" == "" ]
    then
	deinterlace=
    else
	opt_r="-r 50"
    fi
    echo "deinterlace=$deinterlace" >> "$log_c"
    #exit
    [ "$deinterlace" != "" ] && add_vf $deinterlace
    [ "$crop" != "" ] && hwdownload && add_vf $crop
    #[ "$vf" != "" ] && vf="-vf $vf"
    #exit
    # vdr
    # Stream #0:0[0x100]: Video: h264 (High) ([27][0][0][0] / 0x001B), yuv420p(tv, bt709, progressive), 1280x720 [SAR 1:1 DAR 16:9], 50 fps, 50 tbr, 90k tbn, 100 tbc
    # Stream #0:1[0x101](deu): Audio: ac3 ([6][0][0][0] / 0x0006), 48000 Hz, stereo, fltp, 384 kb/s
    # Stream #0:2[0x106](deu): Subtitle: dvb_subtitle ([6][0][0][0] / 0x0006)
    # mp4
    # Stream #0:0(und): Video: h264 (High) (avc1 / 0x31637661), yuv420p(tv, bt709), 1280x720 [SAR 1:1 DAR 16:9], 7278 kb/s, 50 fps, 50 tbr, 90k tbn, 100 tbc (default)
    # Stream #0:1(deu): Audio: ac3 (ac-3 / 0x332D6361), 48000 Hz, stereo, fltp, 384 kb/s (default)
    # Stream #0:2(deu): Subtitle: dvd_subtitle (mp4s / 0x7334706D), 720x480, 9 kb/s (default)
    # mkv
    # Stream #0:0: Video: h264 (High), yuv420p(tv, bt709, progressive), 1280x720 [SAR 1:1 DAR 16:9], 50 fps, 50 tbr, 1k tbn, 100 tbc (default)
    # Stream #0:1(deu): Audio: ac3, 48000 Hz, stereo, fltp, 384 kb/s (default)
    # Stream #0:2(deu): Subtitle: dvb_subtitle (default)
    # avi
    # Stream #0:0: Video: msmpeg4v3 (DIV3 / 0x33564944), yuv420p, 576x240, 719 kb/s, 25 fps, 25 tbr, 25 tbn, 25 tbc
    # Stream #0:1: Audio: mp3 (U[0][0][0] / 0x0055), 44100 Hz, stereo, fltp, 127 kb/s
    # dvd
    # Stream #0:0[0x1bf]: Data: dvd_nav_packet
    # Stream #0:1[0x1e0]: Video: mpeg2video (Main), yuv420p(tv, progressive), 720x576 [SAR 64:45 DAR 16:9], 25 fps, 25 tbr, 90k tbn, 50 tbc
    # Stream #0:2[0x81]: Audio: ac3, 48000 Hz, 5.1(side), fltp, 384 kb/s
    # Stream #0:2[0xa0]: Audio: pcm_dvd, 48000 Hz, 2 channels, s16, 1536 kb/s
    # Stream #0:0[0x1bf]: Data: dvd_nav_packet
    # mpg
    # Stream #0:0[0x1e0]: Video: mpeg2video (Main), yuv420p(tv, fcc/bt470bg/bt470bg, top first), 480x576 [SAR 8:5 DAR 4:3], 25 fps, 25 tbr, 90k tbn, 50 tbc
    # Stream #0:1[0x1c0]: Audio: mp2, 44100 Hz, stereo, s16p, 128 kb/s
    #
    # Stream #0:3(ger): Audio: eac3, 48000 Hz, 2 channels, fltp
    # Stream #0:0(eng): Video: av1 (Main), none, 1280x720, SAR 1:1 DAR 16:9, 25 fps, 25 tbr, 1k tbn, 1k tbc (default)
    # Stream #1:0: Audio: mp2, 48000 Hz, stereo, fltp, 192 kb/s
    # UHD
    # Stream #0:0: Video: hevc (Main 10) (hev1 / 0x31766568), yuv420p10le(tv, bt2020nc/bt2020/arib-std-b67), 3840x2160 [SAR 1:1 DAR 16:9], q=2-31, 50 fps, 50 tbr, 12800 tbn, 25 tbc

    #set -x
    #sel_best=1
    if [ "$sel_best" != "" ]
    then
	grep "Audio:" $t > $t"-a"
	brb=0
	while read line
	do
	    str1=${line#*:}
	    str=${str1%%[*}
	    bra1=${line%kb/s*}
	    #echo ${#line} ${#bra1}
	    [ ${#line} -eq ${#bra1} ] && continue
	    nw=$(echo $bra1|wc -w)
	    bra=$(echo $bra1|cut -d \  -f $nw)
	    if [ "$bra" != "" ]
	    then
		re='[0-9]'
		if [[ "$bra" =~ $re ]]
		then
		    # fltp
		    # re='[0-9]'; [[ "1" =~ $re ]] && echo 1
		    #echo "bra=["$bra"]"
		    if [ $bra -gt $brb ]
		    then
			brb=$bra
			sel=$str
		    fi
		fi
	    fi
	done < $t"-a"
	select_str2=$sel
	echo "select_str2="$sel
    fi
    #exit
    map="-map 0:v:0"
    stro1=1
    bras=0
    while read line
    do
	#echo $line
	stro=$stro1
	line2=${line//,/}
	w1=$(echo $line2|cut -d \  -f 1)
	[ "$w1" != "Stream" ] && continue
	codec=$(echo $line|cut -d \  -f 4)
	codec=${codec//,/}
	typ=$(echo $line|cut -d \  -f 3)
	#set -x
	str0=${line%%:*}
	str0=${str0:${#str0}-1:1}
	str1=${line#*:}
	if [[ "$str1" == *[0* ]]
	then
	    #set -x
	    str=${str1%%[*}
	    trid=${line#*[}
	    trid=${trid%%]*}
	    #[ "${langa[$(($trid))]}" != "" ] && metal="$metal -metadata:s:$stro language=${langa[$(($trid))]}"
	    #exit
	else
	    str=${str1%%(*}
	    str=${str%%:*}
	fi
	#set +x
	if [ "$ifmt" == "wmv" ]
	then
	    str=${str1%%(*}
	    str=${str%%:*}
	fi
	#exit
	[ "$ifmt" == "avi" ] && str=${str1%%:*}
	#exit

	if [ "$select_str2" != "" -a "$typ" != "Video:" ]
	then
	    IFS=,
	    ok=0
	    for s in $select_str2
	    do
		[ $str == $s ] && ok=1
	    done
	    unset IFS
	    [ $ok == 0 ] && continue
	fi
	
	if [ "$typ" == "Video:" ]
	then
	    #set -x
	    [ $str0 -gt 0 ] && continue
	    #[ "$ivcodec" != "" ] && continue
	    fps1=${line%fps*}
	    nw=$(echo $fps1|wc -w)
	    fps=$(echo $fps1|cut -d \  -f $nw)
	    ivcodec=$codec
	    if [ "$OUTPUT" == "mp3" ]
	    then
		video="-vn"
		map=
		continue
	    fi
	    if [ "$OUTPUT" == "vdr" ]
	    then
		#[ "$fps" == "23.98" ] && add_vf "fps=25"
		#[ "$fps" == "29.97" ] && add_vf "fps=50"
		#[ $fps -lt 25 ] && add_vf "fps=25" && fpso=25
		[ "$fps" "<" "25" ] && add_vf "fps=25" && fpso=25
		#[ $fps -gt 25 ] && add_vf "fps=50" && fpso=50
		[ "$fps" ">" "25" -a "$fps" != "50" ] && add_vf "fps=50" && fpso=50
	    fi
	    #[ "$vf" != "" ] && vf="-vf $vf"
	    #set -x
	    hw=${line%%[SAR*}
	    nw=$(echo $hw|wc -w)
	    hw=$(echo $hw|cut -d \  -f $nw)
	    vw=$(echo $hw|cut -d 'x' -f 2)
	    hw=$(echo $hw|cut -d 'x' -f 1)
	    if [ "$scale" != "" ]
	    then
		#echo $scale
		hw=$(echo $scale|cut -d ':' -f 1)
		vw=$(echo $scale|cut -d ':' -f 2)
	    fi
	    [ $vw -le 576 ] && h264_level=3.1
	    [ $vw -ge 1080 ] && h264_level=4.2
	    [ $vw -gt 2000 ] && hevc_level=5.1 && level_hevc="-level 5.1" && h264_level=5.2
	    #exit
	fi
	if [ "$typ" == "Audio:" ]
	then
	    atyp1=${line2#*Hz*}
	    atyp=$(echo $atyp1 | cut -d ' ' -f 1)
	    atyp=${atyp//,/}
	    bra1=${line%kb/s*}
	    if [ ${#line} -ne ${#bra1} ]
	    then
		nw=$(echo $bra1|wc -w)
		bra=$(echo $bra1|cut -d \  -f $nw)
		#bras=$(($bras+$bra))
	    else
		bra=0
	    fi
	    ar1=${line%Hz*}
	    nw=$(echo $ar1|wc -w)
	    ar1=$(echo $ar1|cut -d \  -f $nw)
	    #set -x
	    [ "${lang[$str]}" != "" ] && OPT="$OPT -metadata:s:$stro language=${lang[$str]}"
	    [ "${streamo[$str]}" != "" ] && str=${streamo[$str]}
	    #exit
	fi
	case $codec in
	    "mpeg2video"|"mpeg1video")
		#set -x
		video="-c:v:0 copy"
		#decode_cuvid="-c:v mpeg2_cuvid"
		decode_cuvid="-c:v ${codec:0:5}_cuvid"
		#decode_mmal="-c:v ${codec:0:5}_mmal"
		#parameter "--nohw"
		[ "$vcodec" != "" ] && mpeg2=$vcodec
		#[ "$mpeg2" == "h264" ] &&  set_h264
		#[ "$mpeg2" == "hevc" ] && set_hevc
		#[ "$mpeg2" == "vp8" ] && set_vp8
		#[ "$mpeg2" == "vp9" ] && set_vp9
		set_video $mpeg2
		;;
	    "h264")
		#set -x
		video="-c:v copy"
		[ "$vcodec" != "" -a "$vcodec" != "h264" ] && h264=$vcodec
		[ "$OUTPUT" == "webm" ] && set_vp8
		[ "$OUTPUT" == "mpg" ] && h264=mpeg2
		decode_cuvid="-c:v h264_cuvid"
		case $h264 in
		    "hevc")
			#decode_cuvid="-c:v h264_cuvid"
			#decode_mmal="-c:v h264_mmal"
			decode_mmal="-c:v "$codec"_mmal"
			set_hevc
			#video="-c:v:0 $hevcenc $preset"
			;;
		    "h264")
			#decode_cuvid="-c:v h264_cuvid"
			#decode_mmal="-c:v h264_mmal"
			decode_mmal="-c:v "$codec"_mmal"
			set_h264
			;;
		    "copy")
			if [ "$fpso" != "" ]
			then
			    #decode_cuvid="-c:v h264_cuvid"
			    #decode_mmal="-c:v h264_mmal"
			    decode_mmal="-c:v "$codec"_mmal"
			    set_h264
			fi
			;;
		    "vp8")
			set_vp8
			;;
		    "vp9")
			set_vp9
			;;
		    "av1")
			set_av1
			;;
		    "mpeg2")
			#decode_cuvid="-c:v h264_cuvid"
			set_mpeg2
			;;
		    *)
			echo "-h264 $h264 wrong"
			exit 8
			;;
		esac
		#exit
		;;
	    "hevc")
		video="-c:v copy"
		deinterlace=
		#[ "$vcodec" != "" ] && hevc=$vcodec
		[ "$vcodec" != "" -a "$vcodec" != "hevc" ] && hevc=$vcodec
		[ "$OUTPUT" == "mpg" ] && hevc=mpeg2
		decode_cuvid="-c:v hevc_cuvid"
		case $hevc in
		    "h264")
			#decode_cuvid="-c:v hevc_cuvid"
			set_h264
			;;
		    "hevc")
			#decode_cuvid="-c:v hevc_cuvid"
			set_hevc
			;;
		    "copy")
			nix=
			;;
		    "av1")
			set_av1
			;;
		    "vp9")
			set_vp9
			;;
		    "mpeg2")
			#decode_cuvid="-c:v hevc_cuvid"
			set_mpeg2
			;;
		    *)
			echo "-hevc $hevc wrong"
			exit 8
			;;
		esac
		;;
	    "vc1")
		video="-c:v copy"
		[ "$OUTPUT" == "vdr" -a "$vc1" == "copy" ] && vc1=h264
		decode_cuvid="-c:v vc1_cuvid"
		decode_mmal="-c:v "$codec"_mmal"
		#if [ "$vc1" == "h264" ]
		#then
		#    decode_cuvid="-c:v vc1_cuvid"
		#    decode_mmal="-c:v "$codec"_mmal"
		#    set_h264
		    #video="-c:v:0 h264_nvenc $preset"
		#fi
		#if [ "$vc1" == "hevc" ]
		#then
		#    decode_cuvid="-c:v vc1_cuvid"
		#    decode_mmal="-c:v "$codec"_mmal"
		#    set_hevc
		    #video="-c:v:0 $hevcenc $preset"
		#fi
		set_video $vc1
		;;
	    "msmpeg4v3"|"msmpeg4v2"|"mpeg4")
		# [mpeg4 @ 0x7fffeb2a7500] Video uses a non-standard and 
		# wasteful way to store B-frames ('packed B-frames'). 
		# Consider using the mpeg4_unpack_bframes bitstream filter 
		# without encoding but stream copy to fix it.
		[ "$vcodec" != "" -a "$vcodec" != "mpeg4" ] && mpeg4=$vcodec
		#[ "$OUTPUT" == "mp4" ] && echo "mpeg4 in mp4 not allowed" && exit 8
		video="-c:v $mpeg4"
		[ "$OUTPUT" == "vdr" -a "$mpeg4" == "copy" ] && mpeg4=h264
		#decode_cuvid="-c:v mpeg4_cuvid"
		[ $codec == "mpeg4" ] && decode_cuvid="-c:v mpeg4_cuvid"
		#[ $codec == "mpeg4" ] && decode_mmal="-c:v "$codec"_mmal"
		#if [ "$mpeg4" == "h264" ]
		#then
		#    [ $codec == "mpeg4" ] && decode_cuvid="-c:v mpeg4_cuvid"
		#    set_h264
		    #video="-c:v:0 h264_nvenc $preset"
		#fi
		#[ "$mpeg4" == "hevc" ] && set_hevc
		#[ "$mpeg4" == "vp8" ] && set_vp8
		#[ "$mpeg4" == "vp9" ] && set_vp9
		set_video $mpeg4
		#OPT_G="$OPT_G -bsf mpeg4_unpack_bframes"
		;;
	    "vp6f"|"flv1")
		parameter --nohw
		video="-c:v copy"
		[ "$OUTPUT" == "vdr" ] && set_h264
		;;
	    "vp8")
		decode_cuvid="-c:v vp8_cuvid"
		video="-c:v copy"
		#[ "$OUTPUT" == "vdr" ] && set_h264
		[ "$OUTPUT" == "vdr" -a "$vp8" == "copy" ] && vp8=h264
		#[ "$vp8" == "h264" ]  && set_h264
		#[ "$vp8" == "hevc" ]  && set_hevc
		set_video $vp8
		;;
	    "vp9")
		decode_cuvid="-c:v vp9_cuvid"
		video="-c:v copy"
		#[ "$OUTPUT" == "vdr" ] && set_h264
		[ "$OUTPUT" == "vdr" -a "$vp9" == "copy" ] && vp9=h264
		#[ "$vp9" == "h264" ]  && set_h264
		#[ "$vp9" == "hevc" ]  && set_hevc
		set_video $vp9
		;;
	    "av1")
		video="-c:v copy"
		#[ "$OUTPUT" == "vdr" ] && set_h264
		[ "$OUTPUT" == "vdr" -a "$av1" == "copy" ] && av1=h264
		#[ "$av1" == "h264" ]  && set_h264
		#[ "$av1" == "hevc" ]  && set_hevc
		set_video $av1
		;;
	    "wmv3")
		set_h264
		;;
	    "wmapro")
		map="$map -map $str0:$str"
		#audio="$audio -c:$stro $aaclib -b:$stro $aac_6ch_br"
		set_aac
		audio="$audio $audio_t"
		stro1=$(($stro1+1))
		;;
	    "ac3")
		#set -x
		map="$map -map $str0:$str"
		audio_t="-c:$stro copy"
		[ "$ac3" == "eac3" ] && audio_t="-c:$stro $ac3 -b:$stro 256k"
		if [ "$ac3" == "aac" ]
		then
		    set_aac
		    ac3_aac=1
		fi
		if [ "$atyp" == "stereo" ]
		then
		    [ $bra -gt 192 -a "$ac3_stereo" == "aac" ] && set_aac
		    [ $bra -gt 192 -a "$ac3_stereo" == "aac_he" ] && set_aac he
		    [ "$ac3v" != "" -a $bra -eq 192 ] && audio_t="-c:$stro $aaclib -b:$stro $aac_stereo_br -filter:$stro volume=$ac3v"
		fi
		#if [ "$atyp" == "mono" -a "$ac3_stereo" == "aac" ]
		#then
		#    audio_t="-c:$stro $aaclib -b:$stro 48k"
		#fi
		#[ "$ac3" == "aac" ] && set_aac
		[ "$ac3" == "aac_he" ] && set_aac he
		[ "$ac3" == "aac_he_v2" ] && set_aac he_v2
		[ "$ac3" == "opus" ] && set_opus
		audio="$audio $audio_t"
		stro1=$(($stro1+1))
		#exit
		;;
	    "eac3")
		map="$map -map 0:$str"
		[ "$OUTPUT" == "mpg" ] && eac3=mp2
		set_audio $eac3
		#audio_t="-c:$stro copy"
		#[ "$eac3" == "aac" ] && set_aac
		#[ "$eac3" == "aac_he" ] && set_aac he
		#[ "$eac3" == "aac_he_v2" ] && set_aac he_v2
		#[ "$eac3" == "opus" ] && set_opus
		audio="$audio $audio_t"
		stro1=$(($stro1+1))
		;;
	    "dts")
		map="$map -map $str0:$str"
		audio_t="-c:$stro copy"
		[ "$OUTPUT" == "vdr" -a "$dts" == "copy" ] && dts=aac
		[ "$dts" == "ac3" ] && audio_t="-c:$stro $dts -b:$stro 448k"
		[ "$dts" == "eac3" ] && audio_t="-c:$stro $dts -b:$stro $aac_6ch_br"
		[ "$dts" == "aac" ] && set_aac
		#[ "$dts" == "aac" ] && audio_t="-c:$stro $aaclib -vbr 2"
		if [ "$atyp" == "stereo" ]
		then
		    audio_t="-c:$stro $aaclib -b:$stro 128k"
		fi
		[ "$dts" == "opus" ] && set_opus
		audio="$audio $audio_t"
		stro1=$(($stro1+1))
		;;
	    "aac")
		map="$map -map $str0:$str"
		audio_t="-c:$stro copy"
		#[ "$OUTPUT" == "webm" ] && audio_t="-c:$stro libopus"
		#[ "$OUTPUT" == "webm" ] && set_opus
		[ "$OUTPUT" == "webm" ] && aac=opus
		[ "$OUTPUT" == "mpg" ] && aac=mp2
		set_audio $aac
		if [ "$OUTPUT" == "vdr" -a $ar1 -ne 48000 ]
		then
		    #ar="-ar:$stro 48000"
		    #audio_t="-c:$stro $aaclib -b:$stro $aac_stereo_br $ar"
		    set_aac
		fi
		#[ "$aac" == "opus" ] && audio_t="-c:$stro opus -strict -2"
		#[ "$aac" == "opus" ] && audio_t="-c:$stro libopus"
		#[ "$aac" == "opus" ] && set_opus
		#[ "$aac" == "aac" ] && audio_t="-c:$stro $aaclib -b:$stro $aac_stereo_br"
		#[ "$aac" == "aac" ] && set_aac
		#[ "$aac" == "aac_he" ] && set_aac he
		#[ "$aac" == "aac_he_v2" ] && set_aac he_v2
		audio="$audio $audio_t"
		stro1=$(($stro1+1))
		;;
	    "aac_latm")
		map="$map -map 0:$str"
		audio_t="-c:$stro copy"
		#if [ "$OUTPUT" == "mp4" ]
		#then
		#    br=
		#    [ "$atyp" == "stereo" ] && br="-b:$stro $aac_stereo_br"
		#    audio_t="-c:$stro $aaclib $br"
		#fi
		[ "$OUTPUT" == "mp4" ] && aac=aac
		[ "$OUTPUT" == "mpg" ] && aac=mp2
		#[ "$aac" == "opus" ] && set_opus
		#[ "$aac" == "aac_he" ] && set_aac he
		set_audio $aac
		audio="$audio $audio_t"
		stro1=$(($stro1+1))
		;;
	    "mp2")
		map="$map -map $str0:$str"
		audio_t="-c:$stro copy"
		#[ "$mp2" == "aac" ] && audio_t="-c:$stro $aaclib -b:$stro $aac_stereo_br"
		set_audio $mp2
		#[ "$mp2" == "aac" ] && set_aac
		#[ "$mp2" == "aac_he" ] && set_aac he
		#[ "$mp2" == "aac_he_v2" ] && set_aac he_v2
		#[ "$mp2" == "aac" ] && audio_t="-c:$stro $aaclib -vbr 3"
		#[ "$mp2" == "opus" ] && set_opus
		audio="$audio $audio_t"
		stro1=$(($stro1+1))
		;;
	    "mp3")
		#set -x
		map="$map -map $str0:$str"
		#audio_t="-c:$stro copy"
		[ "$OUTPUT" == "vdr" ] && mp3=aac
		[ "$OUTPUT" == "webm" ] && mp3=opus
		set_audio $mp3
		#if [ "$mp3" == "aac" ]
		#then
		#    if [ $ar1 -ne 48000 ]
		#    then
		#        ar="-ar:$stro 48000"
		#    fi
		#    audio_t="-c:$stro $aaclib -b:$stro $aac_stereo_br $ar"
		#fi
		#[ "$mp3" == "opus" ] && set_opus
		audio="$audio $audio_t"
		stro1=$(($stro1+1))
		#exit
		;;
	    "pcm_dvd"|"pcm_s16le"|"pcm_s16be"|"pcm_bluray")
		map="$map -map $str0:$str"
		#audio="$audio -c:$stro $aaclib -b:$stro $aac_stereo_br"
		audio="$audio -c:$stro $aaclib -b:$stro 128k"
		#audio="$audio -c:$stro $aaclib -vdr 2"
		stro1=$(($stro1+1))
		;;
	    "opus")
		map="$map -map $str0:$str"
		#audio_t="-c:$stro copy"
		#audio="$audio -c:$stro $aaclib -b:$stro $aac_stereo_br"
		#[ "$OUTPUT" == "vdr" ] && set_aac
		[ "$OUTPUT" == "vdr" ] && opus=aac
		set_audio $opus
		audio="$audio $audio_t"
		stro1=$(($stro1+1))
		;;
	    "dvb_subtitle")
		map="$map -map $str0:$str"
		if [ "$fmt" == "mp4" ]
		then
		    subt="$subt -c:$stro dvd_subtitle"
		else
		    subt="$subt -c:$stro copy"
		fi
		stro1=$(($stro1+1))
		;;
	    "dvd_subtitle"|"subrip"|"ass")
	    #"dvd_subtitle"|"ass")
		[ "$OUTPUT" == "vdr" ] && continue
		[ "$fmt" == "mp4" ] && continue
		map="$map -map $str0:$str"
		subt="$subt -c:$stro copy"
		stro1=$(($stro1+1))
		;;
	    #"subrip")
		#map="$map -map 0:$str"
		#subt="$subt -c:$stro mov_text"
		#subt="$subt -c:$stro dvd_subtitle"
		#stro1=$(($stro1+1))
		#;;
	    "hdmv_pgs_subtitle")
		[ "$fmt" == "mp4" ] && continue
		map="$map -map $str0:$str"
		subt="$subt -c:$stro copy"
		stro1=$(($stro1+1))
		;;
	    #"dvd_nav_packet"|"bin_data"|"png"|"dvb_teletext"|"none"|"mjpeg")
	    "dvd_nav_packet"|"dvb_teletext"|"none"|"mjpeg")
		continue
		;;
	    "bin_data"|"png")
		#set -x
		[ "$OUTPUT" == "vdr" ] && continue
		[ "$fmt" == "mkv" ] && continue
		map="$map -map $str0:$str"
		audio_t="-c:$stro copy"
		audio="$audio $audio_t"
		stro1=$(($stro1+1))
		#set +x
		#exit
		;;
	    *)
		echo "Codec $codec unknown"
		exit 8
		;;
	esac
    done < $t
    #exit
}

transcode() {
    #set -x
    name="$1"
    [ "$auto" == "1" ] && echo $(cat $vtlog) > dest
    OPT="$OPT -metadata service_name=vdr-transcode"
    #opt="-hide_banner $OPT_G $ffmpeg_i -map 0 -c copy $OPT $name.$fmt"
    #opt="-hide_banner $OPT_G $ffmpeg_i -map 0 $video $audio $subt $OPT $name"
    [ -e ffmetadata ] && ffmpeg_i="$ffmpeg_i -i ffmetadata"
    #opt="-hide_banner $OPT_G $HWACC $OPT_I $ffmpeg_i $map $video $audio $subt $OPT $metal \"$name\""
    [ ${ffmpeg_i:${#ffmpeg_i}-1:1} == \" ] && name="\"$name\""
    opt="-hide_banner $OPT_G $HWACC $OPT_I $ffmpeg_i $map $video $audio $subt $OPT $metal $name"
    [ "$auto" == "1" ] && opt="-nostdin $opt"
    echo $ffmpeg $opt >> "$log_c"
    if [ "$sim" != "" ]
    then
	echo $ffmpeg $opt
	exit
    fi
    #exit
    if [ "$quiet" == 1 ]
    then
	nice $ffmpeg $opt 2>> "$log_c"
    else
	#nice $ffmpeg $opt 2>&1 | tee -a $log_c
        #sss="nice $ffmpeg $opt"
        #eval "$sss" 2>&1 | tee -a "$log_c"
        [ ${ffmpeg_i:${#ffmpeg_i}-1:1} == \" ] && x=eval
	$x nice $ffmpeg $opt 2>&1 | tee -a "$log_c"
    fi
    rm -f ffmetadata
    echo "===========================================================" >> "$log_c"
    #ffprobe -hide_banner -i $name 2>> $log_c
    #$ffprobe -hide_banner -i $name 2>$t
    #sss="$ffprobe -hide_banner -i \"$name\" 2>$t"
    #eval $sss
    #[ ${ffmpeg_i:${#ffmpeg_i}-1:1} == \" ] && x=eval
    #$x $ffprobe -hide_banner -i "$name" 2>$t
    #set -x
    #name=${name/\(/(}
    #name=${name/\)/)}
    #if [ ${ffmpeg_i:${#ffmpeg_i}-1:1} == \" ]
    #then
	#sss="$ffprobe -hide_banner -i \"$name\" 2>$t"
	#eval $sss
    #else
	eval $ffprobe -hide_banner -i $name 2>$t
	#$ffprobe -hide_banner -i $name 2>$t
    #fi
    cat $t >> "$log_c"
    #set -x
    line=$(grep "Video:" $t)
    if [ "$line" != "" ]
    then
	fps1=${line%fps*}
	nw=$(echo $fps1|wc -w)
	fpso=$(echo $fps1|cut -d \  -f $nw)
    fi
}

log_conf() {
    if [ -e $1 ]
    then
	echo "====================================" >> "$log_c"
	echo $1 >> "$log_c"
	#cat $1 >> $log_c
	while read line
	do
	    [ "${line:0:1}" != "#" ] && echo $line >> "$log_c"
	done < $1
	echo "====================================" >> "$log_c"
    fi
}

header() {
    d=`date +"%F %T"`
    v=$($ffmpeg -version)
    v=$(echo $v | cut -d \  -f 3)
    echo "Start $d vdr-transcode ffmpeg Version $v" > "$log_c"
    sd=$(date +"%F %T" -r $0)
    echo "script date" $sd >> "$log_c"
    uname -p >> "$log_c"
    lspci | grep VGA >> "$log_c"
    if [ -e /proc/asound/NVidia ]
    then
	xlog=/var/log/Xorg.0.log
	[ -e $xlog ] && grep "NVIDIA GPU " $xlog >> "$log_c"
    fi
    log_conf $conf
    log_conf $conf1
    echo -e -n "Parameter:\n" $parameter_log >> "$log_c"
    log_conf $vtc
    echo "PWD:" $PWD >> "$log_c"
    cat $old >> "$log_c"
}

info_create() {
    info=$dest/info
    #cat $t
    dauer1=$(grep "Duration:" $t)
    dauer2=$(echo $dauer1 | cut -d \  -f 2)
    dauer=$(date -u "+%s" -d "1970-01-01 ${dauer2:0:8}")
    echo "C M vdr-transcode" > $info
    echo "E 0 $rec_time $dauer" >> $info
    [ "$info_name" != "" ] && echo "T" $(echo $info_name|tr '_' ' ') >> $info	# checkme
    [ "$fpso" == "" ] && fpso=$fps
    echo "F $fpso" >> $info
    echo "P 50" >> $info
    echo "L 99" >> $info
}

to_utf8() {
    f=$(file $1)
    c=$(echo $f|cut -d \  -f 2)
    if [ "$c" == "ISO-8859" ]
    then
        #echo $r
        recode ISO_8859-1...UTF8 $1
    fi
}

copy_vdr() {
    #set -x
    log_c=$dest/logfile
    mkdir -p $dest
    if [ "$ifmt" == "vdr" ]
    then
	echo $(dirname $PWD)"/"${log_c:3} > $vtlog
    else
	echo $PWD/$log_c > $vtlog
    fi
    header
    [ "$auto" != "1" ] && echo $d $PWD >> $logs
    analyze $ffmpeg_i
    if [ "$video_add" != "" ]
    then
	#set -x
	d1=$($ffmpeg -hide_banner $ffmpeg_i 2>&1 | grep "Duration:")
	# Duration: 00:07:53.36, start: 0.000000, bitrate: 948 kb/s
	echo "$d1" >> $log_c
	d2=$(echo $d1|cut -d \  -f 2)
	d3=${d2:0:8}
	ds=$(date -u -d "1970-01-01 $d3" "+%s")
	d=$(($ds+$video_add))
	# -i concat:00001.ts
	inp=$(echo $ffmpeg_i|cut -d \  -f 2)
	[ ${inp:0:7} == "concat:" ] && inp=${inp:7}
	ffmpeg_i="-i concat:$inp|$inp"
	OPT_G="$OPT_G -t $d"
	#exit
    fi
    #OPT="$OPT -mpegts_flags system_b"
    #OPT="$OPT -mpegts_flags latm"
    OPT="$OPT -map_chapters -1"
    #OPT="$OPT -metadata creation_time=$(date "+%FT%T" -d @$rec_time)"
    transcode $dest/00001.ts
    #if [ -e info ]
    #then
	#cp -p info $dest
    #else
	#if [ "$ifmt" == "dvd" -a -e ../info.vdr ]
	#then
    case $ifmt in
	"vdr")
	    [ -e info ] && cp -p info $dest
	    if [ -e info.vdr ]
	    then
		#cp -p info.vdr $dest/info
		iconv -f ISO-8859-1 -t UTF-8 < info.vdr > $dest/info
		#echo "F 25" >> $dest/info
		echo "L 99" >> $dest/info
		echo "P 50" >> $dest/info
	    fi
	    ;;
	"dvd")
	    #set -x
	    if [ -e ../info.vdr ]
	    then
		cp ../info.vdr $dest/info
		echo "F 25" >> $dest/info
		echo "L 99" >> $dest/info
		echo "P 50" >> $dest/info
	    else
		info_create
	    fi
	    to_utf8 $dest/info
	    ;;
	"BD")
	    if [ "$BD_info" != "" ]
	    then
		iconv -f ISO-8859-1 -t UTF-8 < $BD_info > $dest/info
	    else
		info_create
	    fi
	    ;;
	*)
	    if [ -e info.vdr ]
	    then
		iconv -f ISO-8859-1 -t UTF-8 < info.vdr > $dest/info
		echo "F 25" >> $dest/info
		echo "L 99" >> $dest/info
		echo "P 50" >> $dest/info
	    else
		info_create
	    fi
	    ;;
    esac
    [ ! -e $dest/info ] && info_create
    #fi
    #[ -e marks ] && cp -p marks $dest
    marks=marks
    [ -e marks.vdr ] && marks=marks.vdr
    if [ -e $marks ]
    then
	echo "======== marks ========" >> $log_c
	cat $marks >> $log_c
	echo "======== marks ========" >> $log_c
    fi
    [ -e messages ] && cp -p messages $dest
    [ -e logfile ] && cp -p logfile $dest/logfile1
    if [ -e logfile1 ]
    then
	fd=$(date -r logfile1 "+%Y%m%d%H%M")
        cp -p logfile1 $dest/logfile".$fd"
    fi
    [ -e info.txt ] && cp -p info.txt $dest
    if [ "$apply_codec" == "1" ]
    then
	#set -x
	if [ -e info.txt ]
	then
	    i=$(cat info.txt)
	    echo "$i $vcodec" > $dest/info.txt
	else
	    echo $vcodec > $dest/info.txt
	fi
    fi
    #vdr=$VDRDIR/vdr
    which vdr 2> /dev/null
    if [ $? -eq 0 ]
    then
	vdr=$(which vdr)
    fi
    if [ -e $VDRDIR/vdr ]
    then
	vdr=$VDRDIR/vdr
    fi
    if [ -x "$vdr" ]
    then
	echo genindex
        #nice $vdr --genindex="./$dest"
        #set -x
        [[ "$dest" != */* ]] && dest="./"$dest
        nice $vdr --genindex=$dest
        #set +x
        [ "$fpso" == "" ] && fpso=$fps
        li=$(ls -l $dest/index|cut -d ' ' -f 5)
        fpso=$(grep ^F $dest/info|cut -d \  -f 2)
        [ "$fpso" == "" ] && fpso=25
        #set -x
        #si=$(($li/200*25/$fpso))
        #si=$(($li/8/$fpso))
        sic1=$(($li*100/8/$fpso))
        si=$(($sic1/100))
        sic=$(($sic1-($si*100)))
        #date -u -d @$si +"index %T" >> $log_c
    else
	echo $vdr "not found" >> $log_c
    fi
    if [ "$ifmt" == "vdr" ]
    then
	[ -e index ] && is1=$(ls -l index|cut -d \  -f 5)
	[ -e index.vdr ] && is1=$(ls -l index.vdr|cut -d \  -f 5)
	[ -e info ] && fpsi=$(grep ^F info|cut -d \  -f 2)
	[ "$fpsi" == "" ] && fpsi=25
	#si1=$(($is1/8/$fpsi))
	sic1=$(($is1*100/8/$fpsi))
        si1=$(($sic1/100))
        sic1=$(($sic1-($si1*100)))
	is2=$(ls -l $dest/index|cut -d \  -f 5)
	echo "===========================================================" >> $log_c
	echo -n "index=$is1" >> $log_c
	date -u -d @$si1 +" %T."$sic1 >> "$log_c"
	echo -n "index=$is2" >> $log_c
	[ "$si" != "" ] && date -u -d @$si +" %T."$sic >> "$log_c"
    fi
    if [ -e $VIDEODIR ]
    then
        /usr/bin/touch $VIDEODIR/.update
    fi
    s=$(du $dest)
    newsize=$(echo $s|cut -d \  -f 1)
}

copy_file() {
    #set -x
    fmt=$1
    out=$name.$fmt
    i=1
    while [ -e "$out" ]
    do
	i=$(($i+1))
	out=$name-$i.$fmt
    done
    log_c=$out.log
    echo $PWD/$log_c > $vtlog
    header
    analyze $ffmpeg_i
    #OPT="$OPT -timestamp $(date "+%FT%T" -d @$rec_time)"
    #OPT="$OPT -metadata \"creation_time=$(date "+%FT%T" -d @$rec_time)\""
    OPT="$OPT -metadata creation_time=$(date "+%FT%T" -d @$rec_time)"
    OPT="$OPT -metadata title=\"$(basename $name)\""
    [ "$fmt" == "mp4" ] && OPT="$OPT -movflags faststart"
    transcode "$out"
    newsize=$(ls -l "$out"|cut -d \  -f 5)
    newsize=$(($newsize/1024))
    #set -x
    [ "$fmt" == "ts" ] && touch -d $(date "+%FT%T" -d @$rec_time) $out
    if [ "$ifmt" == "vdr" ]
    then
	info=
	[ -e info ] && info=info
	[ -e info.vdr ] && info=info.vdr
	if [ "$info" != "" ]
	then
	    grep "^T" $info > $name.inf
	    grep "^S" $info >> $name.inf
	    grep "^D" $info >> $name.inf
	fi
    fi
    #set +x
}

copy_mp3() {
    #set -x
    fmt=mp3
    out=$name.mp3
    oldsize=1
    i=1
    while [ -e $out ]
    do
	i=$(($i+1))
	out=$name-$i.mp3
    done
    log_c=$out.log
    echo $PWD/$log_c > $vtlog
    header
    #analyze $ffmpeg_i
    video="-vn"
    map="-map a:0"
    [ "$select_str" != "" ] && map="-map $str0:$select_str"
    audio="-c mp3 $mp3_b"
    OPT_V=
    transcode "$out"
    #exit
}

copy_m4a() {
    #set -x
    fmt=m4a
    out=$name.m4a
    oldsize=1
    i=1
    while [ -e $out ]
    do
	i=$(($i+1))
	out=$name-$i.m4a
    done
    log_c=$out.log
    echo $PWD/$log_c > $vtlog
    header
    #set -x
    #analyze $ffmpeg_i
    # Stream #0:1[0x101](deu): Audio: aac (LC) ([15][0][0][0] / 0x000F), 48000 Hz, stereo, fltp, 99 kb/s'
    r=$($ffprobe $ffmpeg_i 2>&1 | grep "Audio:" | head -n 1)
    typ=$(echo $r | cut -d \  -f 4)
    video="-vn"
    if [ "$typ" == "aac" ]
    then
	audio="-c copy"
    else
	audio="-c $aaclib $mp3_b"
    fi
    #exit
    map="-map a:0"
    [ "$select_str" != "" ] && map="-map $str0:$select_str"
    OPT_V=
    transcode "$out"
    #exit
}

copy() {
    #set -x
    if [ -e $runvt ]
    then
	oldpid=$(cat $runvt)
	if [ -e /proc/$oldpid ]
	then
	    echo "already running"
	    exit 99
	fi
    fi
    echo $$ > $runvt
    #exit
    case $OUTPUT in
	"vdr")
	    copy_vdr
	    ;;
	"mkv")
	    copy_file $OUTPUT
	    ;;
	"mp4")
	    copy_file $OUTPUT
	    ;;
	"mpg")
	    copy_file $OUTPUT
	    ;;
	"ts")
	    copy_file $OUTPUT
	    ;;
	"webm")
	    copy_file $OUTPUT
	    ;;
	"mp3")
	    copy_mp3 $OUTPUT
	    ;;
	"m4a")
	    copy_m4a $OUTPUT
	    ;;
	#"jpg")
	#    copy_file $OUTPUT
	#    ;;
	*)
	    echo "-o" $OUTPUT "invalid"
	    exit 8
	    ;;
    esac
}

server() {
    #set -x
    if [ -e $runs ]
    then
        oldpid=$(cat $runs)
        if [ -e /proc/$oldpid ]
        then
            echo "already running"
            exit 99
        fi
    fi
    if [ "$1" == "-d" ]
    then
	vdr-transcode --as &
	exit
    fi
    #PID=$(pidof $0)
    echo $$ > $runs
    wd=$PWD
    while (true) do
	while read line
	do
	    if [ -e $line ]
	    then
		for rh in $(find $line -name $vtc)
		do
		    dh=$(dirname $rh)
		    if [ ! -e $dh/$vtc ]
		    then
		        continue
		    fi
		    cd $dh
		    if [ ! -e $lck ]
		    then
			touch $lck
			d=`date +"%F %T"`
			echo $d $dh >> $logs
			vdr-transcode --auto > vt.log 2> vt.err
		    fi
		    cd $wd
		done
	    fi
	done < $confs
	sleep 60
    done
    rm $runs
    exit
}

server_kill() {
    if [ -e $runs ]
    then
        pid=$(cat $runs)
        if [ -e /proc/$pid ]
        then
            kill -15 $pid
        else
	    echo "not running"
        fi
    else
	echo "not running"
    fi
    exit
}

auto_queue() {
    #set -x
    while read line
    do
	if [ -e $line ]
	then
	    for rh in $(find $line -name $vtc)
	    do
		echo $rh
	    done
	fi
    done < $confs
    exit
}

ls_del_s() {
    # records marked to delete
    #set -x
    sum=0
    while read line
    do
	if [ -e $line ]
	then
	    for rh in $(find $line -type d -name "*.del")
	    do
		size=$(du $rh)
		size=$(echo $size | cut -d \  -f 1)
		echo $size $rh
		#rmdir $rh
		rm $rh/*
		#rmdir --ignore-fail-on-non-empty $rh
		rmdir $rh
		#exit
		sum=$(($sum+$size))
	    done
	fi
    done < $confs
    echo "Summe="$(($sum/1024))"Mb"
    exit
}

ls_del() {
    # records marked to delete
    #set -x
    t=/tmp/vtc
    t2=/tmp/vtc2
    tac $logs > $t
    sum=0
    i=0
    while read line
    do
	c=$(echo $line | cut -d \  -f 3-)
	ext=${c##*.}
	[ "$ext" != "rec" ] && continue
	c2=${c%.*}".del"
	if [ ! -e "$c2" ]
	then
	    i=$(($i+1))
	    [ $i -gt 10 ] && break
	    continue
	fi
	size=$(du $c2)
	size=$(echo $size | cut -d \  -f 1)
	echo $size $c2
	rm $c2/*
	#rmdir --ignore-fail-on-non-empty $c2
	rmdir $c2
	sum=$(($sum+$size))
	#exit
    done < $t
    echo "Summe="$sum $(($sum/1025))"MB"
    exit
}

auto_check() {
    #set -x
    t=/tmp/vtc
    t2=/tmp/vtc2
    tac $logs > $t
    #cat $t
    sum=0
    i=0
    while read line
    do
	c=$(echo $line | cut -d \  -f 3-)
	if [ ! -e "$c" ]
	then
	    i=$(($i+1))
	    [ $i -gt 10 ] && break
	    continue
	fi
	ext=${c##*.}
	if [ "$ext" == "rec" ]
	then
	    [ ! -e $c/dest ] && continue
	    c2=$(cat $c/dest)
	    [ ! -e $c2 ] && continue
	    status $c2
	    c2=$(dirname $c2)
	    #s=$(ls -l $c/index|cut -d \  -f 5)
	    #echo "index" $s
	    #s=$(ls -l $c2/index|cut -d \  -f 5)
	    #echo "index" $s
	    grep "index=" $c2/logfile
	    #set -x
	    grep "Duration:" $c2/logfile | tail -n 2
	    grep "Duration:" $c2/logfile | tail -n 2 > $t2
	    #  Duration: 01:39:25.94, start: 7539.052489, bitrate: 9692 kb/s
	    #  Duration: 01:39:06.66, start: 1.400000, bitrate: 2013 kb/s
	    d1=$(head -n 1 $t2)
	    d1=$(echo $d1|cut -d \  -f 2)
	    d1s=$(date -u "+%s" -d "1970-01-01 ${d1:0:8}")
	    d1ms=$d1s${d1:9:2}
	    d2=$(tail -n 1 $t2)
	    d2=$(echo $d2|cut -d \  -f 2)
	    d2s=$(date -u "+%s" -d "1970-01-01 ${d2:0:8}")
	    d2ms=$d2s${d2:9:2}
	    #echo $d2ms $d1ms
	    echo "Diff" $(($d2ms-$d1ms))"cs"
	    #exit
	    sum=$(($sum+$oldsize))
	fi
    done < $t
    echo "Summe="$sum $(($sum/1025))"MB"
    exit
}

auto_conf() {
    #set -x
    #echo $parameter_log
    #echo $parameter_auto
    touch $vtc
    #IFS=$'\n'
    #IFS='\n'
    IFS='|'
    for p in $parameter_auto
    do
	#p=$(echo $p)
	[ "${p:0:1}" == " " ] && p=${p:1}
	#echo $p
	[ "$p" == "--conf" ] && continue
	echo $p >> $vtc
    done
    cat $vtc
    exit
}

#set -x
case "$INPUT" in
    "vdr"|"")
	input_vdr
	;;
    "dvd")
	input_dvd $track
	;;
    "BD")
	#set -x
	input_BD $track
	#exit
	;;
    "none")
	none=
	;;
    *)
	if [ "${INPUT:0:4}" == "dvd:" ]
	then
	    tr=${INPUT:4}
	    input_dvd $tr
	else
	    input_file
	fi
	;;
esac
set_hwacc

start=$(date +"%s")

#set -x
case $TODO in
    "-h")
	help $2
	;;
    "--streams")
	streams
	;;
    "--inf")
	inf
	;;
    "--stat")
	status $(cat "$vtlog")
	exit
	;;
    "--as")
	server
	;;
    "--asd")
	server -d
	;;
    "--ak")
	server_kill
	;;
    "--aq")
	auto_queue
	;;
    "--lsdel")
	ls_del
	;;
    "--lsdel_s")
	ls_del_s
	;;
    "--ac")
	auto_check
	;;
    "--conf")
	auto_conf
	;;
    "--diag")
	diag
	;;
    *)
	copy
	;;
esac

ende=$(date +"%s")
sek=$(($ende-$start))

[ -e $vtc ] && mv $vtc $vtc.rdy
#set -x
cp -p "$log_c" $t
g=$(id -g -n $USER)
chown $USER:$g $t
r=$(grep "^video:" $t)
videos=$(echo $r|cut -d \  -f 1)
videos=$(echo $videos|cut -d ':' -f 2)
videos=${videos:0:${#videos}-2}
audios=$(echo $r|cut -d \  -f 2)
audios=$(echo $audios|cut -d ':' -f 2)
audios=${audios:0:${#audios}-2}
dur=$(grep "Duration:" $t|head -n 1)
dur=$(echo $dur|cut -d \  -f 2)
if [ "$dur" != "N/A," ]
then
    durs1=$(date -u "+%s" -d "1970-01-01 ${dur:0:8}")
    brv=$(($videos*8/$durs1))
    bra=$(($audios*8/$durs1))
fi
echo "===========================================================" >> "$log_c"
echo "Video:" $brv"kb/s Audio:" $bra"kb/s" >> "$log_c"
grep "Video:" $t >> "$log_c"
grep "Duration:" $t >> "$log_c"
if [ "$dur" != "N/A," ]
then
    durs1ms=$durs1${dur:9:2}
    dur=$(grep "Duration:" $t|tail -n 1)
    dur=$(echo $dur|cut -d \  -f 2)
    durs2=$(date -u "+%s" -d "1970-01-01 ${dur:0:8}")
    durs2ms=$durs2${dur:9:2}
    echo "Diff:" $(($durs2ms-$durs1ms))"cs" >> "$log_c"
fi
[ "$OUTPUT" == "vdr" -a "$si" != "" ] && date -u -d @$si +"index %T" >> "$log_c"
if [ $oldsize -gt 1 ]
then
    echo "Alt" $oldsize >> "$log_c"
    prz=$(($newsize*100/$oldsize))
    echo "Neu" $newsize $prz"%" >> "$log_c"
fi
echo -n "Dauer: " >> "$log_c"
date -u -d @$sek "+%T" >> "$log_c"
d=`date +"%F %T"`
echo "Ende" $d >> "$log_c"
rm -f $lck
rm $runvt
